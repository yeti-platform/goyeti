/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// IndicatorsAPIService IndicatorsAPI service
type IndicatorsAPIService service

type ApiDeleteApiV2IndicatorsIndicatorIdDeleteRequest struct {
	ctx         context.Context
	ApiService  *IndicatorsAPIService
	indicatorId string
}

func (r ApiDeleteApiV2IndicatorsIndicatorIdDeleteRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.DeleteApiV2IndicatorsIndicatorIdDeleteExecute(r)
}

/*
DeleteApiV2IndicatorsIndicatorIdDelete Delete

Deletes an indicator.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param indicatorId
	@return ApiDeleteApiV2IndicatorsIndicatorIdDeleteRequest
*/
func (a *IndicatorsAPIService) DeleteApiV2IndicatorsIndicatorIdDelete(ctx context.Context, indicatorId string) ApiDeleteApiV2IndicatorsIndicatorIdDeleteRequest {
	return ApiDeleteApiV2IndicatorsIndicatorIdDeleteRequest{
		ApiService:  a,
		ctx:         ctx,
		indicatorId: indicatorId,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *IndicatorsAPIService) DeleteApiV2IndicatorsIndicatorIdDeleteExecute(r ApiDeleteApiV2IndicatorsIndicatorIdDeleteRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndicatorsAPIService.DeleteApiV2IndicatorsIndicatorIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/indicators/{indicator_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"indicator_id"+"}", url.PathEscape(parameterValueToString(r.indicatorId, "indicatorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDetailsApiV2IndicatorsIndicatorIdGetRequest struct {
	ctx         context.Context
	ApiService  *IndicatorsAPIService
	indicatorId interface{}
}

func (r ApiDetailsApiV2IndicatorsIndicatorIdGetRequest) Execute() (*ResponseDetailsApiV2IndicatorsIndicatorIdGet, *http.Response, error) {
	return r.ApiService.DetailsApiV2IndicatorsIndicatorIdGetExecute(r)
}

/*
DetailsApiV2IndicatorsIndicatorIdGet Details

Returns details about an indicator.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param indicatorId
	@return ApiDetailsApiV2IndicatorsIndicatorIdGetRequest
*/
func (a *IndicatorsAPIService) DetailsApiV2IndicatorsIndicatorIdGet(ctx context.Context, indicatorId interface{}) ApiDetailsApiV2IndicatorsIndicatorIdGetRequest {
	return ApiDetailsApiV2IndicatorsIndicatorIdGetRequest{
		ApiService:  a,
		ctx:         ctx,
		indicatorId: indicatorId,
	}
}

// Execute executes the request
//
//	@return ResponseDetailsApiV2IndicatorsIndicatorIdGet
func (a *IndicatorsAPIService) DetailsApiV2IndicatorsIndicatorIdGetExecute(r ApiDetailsApiV2IndicatorsIndicatorIdGetRequest) (*ResponseDetailsApiV2IndicatorsIndicatorIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseDetailsApiV2IndicatorsIndicatorIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndicatorsAPIService.DetailsApiV2IndicatorsIndicatorIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/indicators/{indicator_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"indicator_id"+"}", url.PathEscape(parameterValueToString(r.indicatorId, "indicatorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNewApiV2IndicatorsPostRequest struct {
	ctx                 context.Context
	ApiService          *IndicatorsAPIService
	newIndicatorRequest *NewIndicatorRequest
}

func (r ApiNewApiV2IndicatorsPostRequest) NewIndicatorRequest(newIndicatorRequest NewIndicatorRequest) ApiNewApiV2IndicatorsPostRequest {
	r.newIndicatorRequest = &newIndicatorRequest
	return r
}

func (r ApiNewApiV2IndicatorsPostRequest) Execute() (*ResponseNewApiV2IndicatorsPost, *http.Response, error) {
	return r.ApiService.NewApiV2IndicatorsPostExecute(r)
}

/*
NewApiV2IndicatorsPost New

Creates a new indicator in the database.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiNewApiV2IndicatorsPostRequest
*/
func (a *IndicatorsAPIService) NewApiV2IndicatorsPost(ctx context.Context) ApiNewApiV2IndicatorsPostRequest {
	return ApiNewApiV2IndicatorsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResponseNewApiV2IndicatorsPost
func (a *IndicatorsAPIService) NewApiV2IndicatorsPostExecute(r ApiNewApiV2IndicatorsPostRequest) (*ResponseNewApiV2IndicatorsPost, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseNewApiV2IndicatorsPost
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndicatorsAPIService.NewApiV2IndicatorsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/indicators/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.newIndicatorRequest == nil {
		return localVarReturnValue, nil, reportError("newIndicatorRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.newIndicatorRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchApiV2IndicatorsIndicatorIdPatchRequest struct {
	ctx                   context.Context
	ApiService            *IndicatorsAPIService
	indicatorId           interface{}
	patchIndicatorRequest *PatchIndicatorRequest
}

func (r ApiPatchApiV2IndicatorsIndicatorIdPatchRequest) PatchIndicatorRequest(patchIndicatorRequest PatchIndicatorRequest) ApiPatchApiV2IndicatorsIndicatorIdPatchRequest {
	r.patchIndicatorRequest = &patchIndicatorRequest
	return r
}

func (r ApiPatchApiV2IndicatorsIndicatorIdPatchRequest) Execute() (*ResponsePatchApiV2IndicatorsIndicatorIdPatch, *http.Response, error) {
	return r.ApiService.PatchApiV2IndicatorsIndicatorIdPatchExecute(r)
}

/*
PatchApiV2IndicatorsIndicatorIdPatch Patch

Modifies an indicator in the database.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param indicatorId
	@return ApiPatchApiV2IndicatorsIndicatorIdPatchRequest
*/
func (a *IndicatorsAPIService) PatchApiV2IndicatorsIndicatorIdPatch(ctx context.Context, indicatorId interface{}) ApiPatchApiV2IndicatorsIndicatorIdPatchRequest {
	return ApiPatchApiV2IndicatorsIndicatorIdPatchRequest{
		ApiService:  a,
		ctx:         ctx,
		indicatorId: indicatorId,
	}
}

// Execute executes the request
//
//	@return ResponsePatchApiV2IndicatorsIndicatorIdPatch
func (a *IndicatorsAPIService) PatchApiV2IndicatorsIndicatorIdPatchExecute(r ApiPatchApiV2IndicatorsIndicatorIdPatchRequest) (*ResponsePatchApiV2IndicatorsIndicatorIdPatch, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponsePatchApiV2IndicatorsIndicatorIdPatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndicatorsAPIService.PatchApiV2IndicatorsIndicatorIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/indicators/{indicator_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"indicator_id"+"}", url.PathEscape(parameterValueToString(r.indicatorId, "indicatorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchIndicatorRequest == nil {
		return localVarReturnValue, nil, reportError("patchIndicatorRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchIndicatorRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchApiV2IndicatorsSearchPostRequest struct {
	ctx                    context.Context
	ApiService             *IndicatorsAPIService
	indicatorSearchRequest *IndicatorSearchRequest
}

func (r ApiSearchApiV2IndicatorsSearchPostRequest) IndicatorSearchRequest(indicatorSearchRequest IndicatorSearchRequest) ApiSearchApiV2IndicatorsSearchPostRequest {
	r.indicatorSearchRequest = &indicatorSearchRequest
	return r
}

func (r ApiSearchApiV2IndicatorsSearchPostRequest) Execute() (*IndicatorSearchResponse, *http.Response, error) {
	return r.ApiService.SearchApiV2IndicatorsSearchPostExecute(r)
}

/*
SearchApiV2IndicatorsSearchPost Search

Searches for indicators.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchApiV2IndicatorsSearchPostRequest
*/
func (a *IndicatorsAPIService) SearchApiV2IndicatorsSearchPost(ctx context.Context) ApiSearchApiV2IndicatorsSearchPostRequest {
	return ApiSearchApiV2IndicatorsSearchPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return IndicatorSearchResponse
func (a *IndicatorsAPIService) SearchApiV2IndicatorsSearchPostExecute(r ApiSearchApiV2IndicatorsSearchPostRequest) (*IndicatorSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IndicatorSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndicatorsAPIService.SearchApiV2IndicatorsSearchPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/indicators/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.indicatorSearchRequest == nil {
		return localVarReturnValue, nil, reportError("indicatorSearchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.indicatorSearchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTagApiV2IndicatorsTagPostRequest struct {
	ctx                 context.Context
	ApiService          *IndicatorsAPIService
	indicatorTagRequest *IndicatorTagRequest
}

func (r ApiTagApiV2IndicatorsTagPostRequest) IndicatorTagRequest(indicatorTagRequest IndicatorTagRequest) ApiTagApiV2IndicatorsTagPostRequest {
	r.indicatorTagRequest = &indicatorTagRequest
	return r
}

func (r ApiTagApiV2IndicatorsTagPostRequest) Execute() (*IndicatorTagResponse, *http.Response, error) {
	return r.ApiService.TagApiV2IndicatorsTagPostExecute(r)
}

/*
TagApiV2IndicatorsTagPost Tag

Tags entities.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiTagApiV2IndicatorsTagPostRequest
*/
func (a *IndicatorsAPIService) TagApiV2IndicatorsTagPost(ctx context.Context) ApiTagApiV2IndicatorsTagPostRequest {
	return ApiTagApiV2IndicatorsTagPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return IndicatorTagResponse
func (a *IndicatorsAPIService) TagApiV2IndicatorsTagPostExecute(r ApiTagApiV2IndicatorsTagPostRequest) (*IndicatorTagResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IndicatorTagResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndicatorsAPIService.TagApiV2IndicatorsTagPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/indicators/tag"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.indicatorTagRequest == nil {
		return localVarReturnValue, nil, reportError("indicatorTagRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.indicatorTagRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
