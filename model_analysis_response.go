/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AnalysisResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalysisResponse{}

// AnalysisResponse struct for AnalysisResponse
type AnalysisResponse struct {
	Entities    [][]interface{} `json:"entities"`
	Observables [][]interface{} `json:"observables"`
	Known       []Observable    `json:"known"`
	Matches     [][]interface{} `json:"matches"`
	Unknown     []string        `json:"unknown"`
}

type _AnalysisResponse AnalysisResponse

// NewAnalysisResponse instantiates a new AnalysisResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalysisResponse(entities [][]interface{}, observables [][]interface{}, known []Observable, matches [][]interface{}, unknown []string) *AnalysisResponse {
	this := AnalysisResponse{}
	this.Entities = entities
	this.Observables = observables
	this.Known = known
	this.Matches = matches
	this.Unknown = unknown
	return &this
}

// NewAnalysisResponseWithDefaults instantiates a new AnalysisResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalysisResponseWithDefaults() *AnalysisResponse {
	this := AnalysisResponse{}
	return &this
}

// GetEntities returns the Entities field value
func (o *AnalysisResponse) GetEntities() [][]interface{} {
	if o == nil {
		var ret [][]interface{}
		return ret
	}

	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value
// and a boolean to check if the value has been set.
func (o *AnalysisResponse) GetEntitiesOk() ([][]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entities, true
}

// SetEntities sets field value
func (o *AnalysisResponse) SetEntities(v [][]interface{}) {
	o.Entities = v
}

// GetObservables returns the Observables field value
func (o *AnalysisResponse) GetObservables() [][]interface{} {
	if o == nil {
		var ret [][]interface{}
		return ret
	}

	return o.Observables
}

// GetObservablesOk returns a tuple with the Observables field value
// and a boolean to check if the value has been set.
func (o *AnalysisResponse) GetObservablesOk() ([][]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Observables, true
}

// SetObservables sets field value
func (o *AnalysisResponse) SetObservables(v [][]interface{}) {
	o.Observables = v
}

// GetKnown returns the Known field value
func (o *AnalysisResponse) GetKnown() []Observable {
	if o == nil {
		var ret []Observable
		return ret
	}

	return o.Known
}

// GetKnownOk returns a tuple with the Known field value
// and a boolean to check if the value has been set.
func (o *AnalysisResponse) GetKnownOk() ([]Observable, bool) {
	if o == nil {
		return nil, false
	}
	return o.Known, true
}

// SetKnown sets field value
func (o *AnalysisResponse) SetKnown(v []Observable) {
	o.Known = v
}

// GetMatches returns the Matches field value
func (o *AnalysisResponse) GetMatches() [][]interface{} {
	if o == nil {
		var ret [][]interface{}
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *AnalysisResponse) GetMatchesOk() ([][]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matches, true
}

// SetMatches sets field value
func (o *AnalysisResponse) SetMatches(v [][]interface{}) {
	o.Matches = v
}

// GetUnknown returns the Unknown field value
func (o *AnalysisResponse) GetUnknown() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Unknown
}

// GetUnknownOk returns a tuple with the Unknown field value
// and a boolean to check if the value has been set.
func (o *AnalysisResponse) GetUnknownOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unknown, true
}

// SetUnknown sets field value
func (o *AnalysisResponse) SetUnknown(v []string) {
	o.Unknown = v
}

func (o AnalysisResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalysisResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entities"] = o.Entities
	toSerialize["observables"] = o.Observables
	toSerialize["known"] = o.Known
	toSerialize["matches"] = o.Matches
	toSerialize["unknown"] = o.Unknown
	return toSerialize, nil
}

func (o *AnalysisResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entities",
		"observables",
		"known",
		"matches",
		"unknown",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalysisResponse := _AnalysisResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalysisResponse)

	if err != nil {
		return err
	}

	*o = AnalysisResponse(varAnalysisResponse)

	return err
}

type NullableAnalysisResponse struct {
	value *AnalysisResponse
	isSet bool
}

func (v NullableAnalysisResponse) Get() *AnalysisResponse {
	return v.value
}

func (v *NullableAnalysisResponse) Set(val *AnalysisResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalysisResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalysisResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalysisResponse(val *AnalysisResponse) *NullableAnalysisResponse {
	return &NullableAnalysisResponse{value: val, isSet: true}
}

func (v NullableAnalysisResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalysisResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
