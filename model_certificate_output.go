/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CertificateOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateOutput{}

// CertificateOutput This is the schema for the Certificate observable type.  Attributes:     last_seen: the last time the certificate was seen.     first_seen: the first time the certificate was seen.     issuer: the issuer of the certificate.     subject: the certificate subject.     serial_number: the certificate serial.     after: the date after which the certificate is valid.     before: the date before which the certificate is valid.     fingerprint: the certificate fingerprint.
type CertificateOutput struct {
	Value        string                           `json:"value"`
	Type         *string                          `json:"type,omitempty"`
	Created      *time.Time                       `json:"created,omitempty"`
	Context      []map[string]interface{}         `json:"context,omitempty"`
	LastAnalysis map[string]time.Time             `json:"last_analysis,omitempty"`
	LastSeen     *time.Time                       `json:"last_seen,omitempty"`
	FirstSeen    *time.Time                       `json:"first_seen,omitempty"`
	Issuer       NullableString                   `json:"issuer,omitempty"`
	Subject      NullableString                   `json:"subject,omitempty"`
	SerialNumber NullableString                   `json:"serial_number,omitempty"`
	After        NullableTime                     `json:"after,omitempty"`
	Before       NullableTime                     `json:"before,omitempty"`
	Fingerprint  NullableString                   `json:"fingerprint,omitempty"`
	Id           string                           `json:"id"`
	Tags         map[string]TagRelationshipOutput `json:"tags"`
	RootType     string                           `json:"root_type"`
}

type _CertificateOutput CertificateOutput

// NewCertificateOutput instantiates a new CertificateOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateOutput(value string, id string, tags map[string]TagRelationshipOutput, rootType string) *CertificateOutput {
	this := CertificateOutput{}
	this.Value = value
	var type_ string = "certificate"
	this.Type = &type_
	this.Id = id
	this.Tags = tags
	this.RootType = rootType
	return &this
}

// NewCertificateOutputWithDefaults instantiates a new CertificateOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateOutputWithDefaults() *CertificateOutput {
	this := CertificateOutput{}
	var type_ string = "certificate"
	this.Type = &type_
	return &this
}

// GetValue returns the Value field value
func (o *CertificateOutput) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CertificateOutput) SetValue(v string) {
	o.Value = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CertificateOutput) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CertificateOutput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CertificateOutput) SetType(v string) {
	o.Type = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CertificateOutput) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CertificateOutput) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *CertificateOutput) SetCreated(v time.Time) {
	o.Created = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *CertificateOutput) GetContext() []map[string]interface{} {
	if o == nil || IsNil(o.Context) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetContextOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *CertificateOutput) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given []map[string]interface{} and assigns it to the Context field.
func (o *CertificateOutput) SetContext(v []map[string]interface{}) {
	o.Context = v
}

// GetLastAnalysis returns the LastAnalysis field value if set, zero value otherwise.
func (o *CertificateOutput) GetLastAnalysis() map[string]time.Time {
	if o == nil || IsNil(o.LastAnalysis) {
		var ret map[string]time.Time
		return ret
	}
	return o.LastAnalysis
}

// GetLastAnalysisOk returns a tuple with the LastAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetLastAnalysisOk() (map[string]time.Time, bool) {
	if o == nil || IsNil(o.LastAnalysis) {
		return map[string]time.Time{}, false
	}
	return o.LastAnalysis, true
}

// HasLastAnalysis returns a boolean if a field has been set.
func (o *CertificateOutput) HasLastAnalysis() bool {
	if o != nil && !IsNil(o.LastAnalysis) {
		return true
	}

	return false
}

// SetLastAnalysis gets a reference to the given map[string]time.Time and assigns it to the LastAnalysis field.
func (o *CertificateOutput) SetLastAnalysis(v map[string]time.Time) {
	o.LastAnalysis = v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *CertificateOutput) GetLastSeen() time.Time {
	if o == nil || IsNil(o.LastSeen) {
		var ret time.Time
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetLastSeenOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *CertificateOutput) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given time.Time and assigns it to the LastSeen field.
func (o *CertificateOutput) SetLastSeen(v time.Time) {
	o.LastSeen = &v
}

// GetFirstSeen returns the FirstSeen field value if set, zero value otherwise.
func (o *CertificateOutput) GetFirstSeen() time.Time {
	if o == nil || IsNil(o.FirstSeen) {
		var ret time.Time
		return ret
	}
	return *o.FirstSeen
}

// GetFirstSeenOk returns a tuple with the FirstSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetFirstSeenOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FirstSeen) {
		return nil, false
	}
	return o.FirstSeen, true
}

// HasFirstSeen returns a boolean if a field has been set.
func (o *CertificateOutput) HasFirstSeen() bool {
	if o != nil && !IsNil(o.FirstSeen) {
		return true
	}

	return false
}

// SetFirstSeen gets a reference to the given time.Time and assigns it to the FirstSeen field.
func (o *CertificateOutput) SetFirstSeen(v time.Time) {
	o.FirstSeen = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateOutput) GetIssuer() string {
	if o == nil || IsNil(o.Issuer.Get()) {
		var ret string
		return ret
	}
	return *o.Issuer.Get()
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateOutput) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Issuer.Get(), o.Issuer.IsSet()
}

// HasIssuer returns a boolean if a field has been set.
func (o *CertificateOutput) HasIssuer() bool {
	if o != nil && o.Issuer.IsSet() {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given NullableString and assigns it to the Issuer field.
func (o *CertificateOutput) SetIssuer(v string) {
	o.Issuer.Set(&v)
}

// SetIssuerNil sets the value for Issuer to be an explicit nil
func (o *CertificateOutput) SetIssuerNil() {
	o.Issuer.Set(nil)
}

// UnsetIssuer ensures that no value is present for Issuer, not even an explicit nil
func (o *CertificateOutput) UnsetIssuer() {
	o.Issuer.Unset()
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateOutput) GetSubject() string {
	if o == nil || IsNil(o.Subject.Get()) {
		var ret string
		return ret
	}
	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateOutput) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// HasSubject returns a boolean if a field has been set.
func (o *CertificateOutput) HasSubject() bool {
	if o != nil && o.Subject.IsSet() {
		return true
	}

	return false
}

// SetSubject gets a reference to the given NullableString and assigns it to the Subject field.
func (o *CertificateOutput) SetSubject(v string) {
	o.Subject.Set(&v)
}

// SetSubjectNil sets the value for Subject to be an explicit nil
func (o *CertificateOutput) SetSubjectNil() {
	o.Subject.Set(nil)
}

// UnsetSubject ensures that no value is present for Subject, not even an explicit nil
func (o *CertificateOutput) UnsetSubject() {
	o.Subject.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateOutput) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber.Get()) {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateOutput) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CertificateOutput) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *CertificateOutput) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}

// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *CertificateOutput) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *CertificateOutput) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

// GetAfter returns the After field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateOutput) GetAfter() time.Time {
	if o == nil || IsNil(o.After.Get()) {
		var ret time.Time
		return ret
	}
	return *o.After.Get()
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateOutput) GetAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.After.Get(), o.After.IsSet()
}

// HasAfter returns a boolean if a field has been set.
func (o *CertificateOutput) HasAfter() bool {
	if o != nil && o.After.IsSet() {
		return true
	}

	return false
}

// SetAfter gets a reference to the given NullableTime and assigns it to the After field.
func (o *CertificateOutput) SetAfter(v time.Time) {
	o.After.Set(&v)
}

// SetAfterNil sets the value for After to be an explicit nil
func (o *CertificateOutput) SetAfterNil() {
	o.After.Set(nil)
}

// UnsetAfter ensures that no value is present for After, not even an explicit nil
func (o *CertificateOutput) UnsetAfter() {
	o.After.Unset()
}

// GetBefore returns the Before field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateOutput) GetBefore() time.Time {
	if o == nil || IsNil(o.Before.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Before.Get()
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateOutput) GetBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Before.Get(), o.Before.IsSet()
}

// HasBefore returns a boolean if a field has been set.
func (o *CertificateOutput) HasBefore() bool {
	if o != nil && o.Before.IsSet() {
		return true
	}

	return false
}

// SetBefore gets a reference to the given NullableTime and assigns it to the Before field.
func (o *CertificateOutput) SetBefore(v time.Time) {
	o.Before.Set(&v)
}

// SetBeforeNil sets the value for Before to be an explicit nil
func (o *CertificateOutput) SetBeforeNil() {
	o.Before.Set(nil)
}

// UnsetBefore ensures that no value is present for Before, not even an explicit nil
func (o *CertificateOutput) UnsetBefore() {
	o.Before.Unset()
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateOutput) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint.Get()) {
		var ret string
		return ret
	}
	return *o.Fingerprint.Get()
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateOutput) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fingerprint.Get(), o.Fingerprint.IsSet()
}

// HasFingerprint returns a boolean if a field has been set.
func (o *CertificateOutput) HasFingerprint() bool {
	if o != nil && o.Fingerprint.IsSet() {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given NullableString and assigns it to the Fingerprint field.
func (o *CertificateOutput) SetFingerprint(v string) {
	o.Fingerprint.Set(&v)
}

// SetFingerprintNil sets the value for Fingerprint to be an explicit nil
func (o *CertificateOutput) SetFingerprintNil() {
	o.Fingerprint.Set(nil)
}

// UnsetFingerprint ensures that no value is present for Fingerprint, not even an explicit nil
func (o *CertificateOutput) UnsetFingerprint() {
	o.Fingerprint.Unset()
}

// GetId returns the Id field value
func (o *CertificateOutput) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CertificateOutput) SetId(v string) {
	o.Id = v
}

// GetTags returns the Tags field value
func (o *CertificateOutput) GetTags() map[string]TagRelationshipOutput {
	if o == nil {
		var ret map[string]TagRelationshipOutput
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetTagsOk() (map[string]TagRelationshipOutput, bool) {
	if o == nil {
		return map[string]TagRelationshipOutput{}, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *CertificateOutput) SetTags(v map[string]TagRelationshipOutput) {
	o.Tags = v
}

// GetRootType returns the RootType field value
func (o *CertificateOutput) GetRootType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootType
}

// GetRootTypeOk returns a tuple with the RootType field value
// and a boolean to check if the value has been set.
func (o *CertificateOutput) GetRootTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootType, true
}

// SetRootType sets field value
func (o *CertificateOutput) SetRootType(v string) {
	o.RootType = v
}

func (o CertificateOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.LastAnalysis) {
		toSerialize["last_analysis"] = o.LastAnalysis
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	if !IsNil(o.FirstSeen) {
		toSerialize["first_seen"] = o.FirstSeen
	}
	if o.Issuer.IsSet() {
		toSerialize["issuer"] = o.Issuer.Get()
	}
	if o.Subject.IsSet() {
		toSerialize["subject"] = o.Subject.Get()
	}
	if o.SerialNumber.IsSet() {
		toSerialize["serial_number"] = o.SerialNumber.Get()
	}
	if o.After.IsSet() {
		toSerialize["after"] = o.After.Get()
	}
	if o.Before.IsSet() {
		toSerialize["before"] = o.Before.Get()
	}
	if o.Fingerprint.IsSet() {
		toSerialize["fingerprint"] = o.Fingerprint.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["tags"] = o.Tags
	toSerialize["root_type"] = o.RootType
	return toSerialize, nil
}

func (o *CertificateOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"id",
		"tags",
		"root_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateOutput := _CertificateOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificateOutput)

	if err != nil {
		return err
	}

	*o = CertificateOutput(varCertificateOutput)

	return err
}

type NullableCertificateOutput struct {
	value *CertificateOutput
	isSet bool
}

func (v NullableCertificateOutput) Get() *CertificateOutput {
	return v.value
}

func (v *NullableCertificateOutput) Set(val *CertificateOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateOutput(val *CertificateOutput) *NullableCertificateOutput {
	return &NullableCertificateOutput{value: val, isSet: true}
}

func (v NullableCertificateOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
