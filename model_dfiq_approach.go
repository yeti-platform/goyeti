/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DFIQApproach type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DFIQApproach{}

// DFIQApproach struct for DFIQApproach
type DFIQApproach struct {
	Name        string                    `json:"name"`
	Description string                    `json:"description"`
	Tags        []string                  `json:"tags,omitempty"`
	References  []string                  `json:"references,omitempty"`
	Notes       NullableDFIQApproachNotes `json:"notes,omitempty"`
	Steps       []DFIQApproachStep        `json:"steps,omitempty"`
}

type _DFIQApproach DFIQApproach

// NewDFIQApproach instantiates a new DFIQApproach object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDFIQApproach(name string, description string) *DFIQApproach {
	this := DFIQApproach{}
	this.Name = name
	this.Description = description
	return &this
}

// NewDFIQApproachWithDefaults instantiates a new DFIQApproach object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDFIQApproachWithDefaults() *DFIQApproach {
	this := DFIQApproach{}
	return &this
}

// GetName returns the Name field value
func (o *DFIQApproach) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DFIQApproach) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DFIQApproach) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *DFIQApproach) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DFIQApproach) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DFIQApproach) SetDescription(v string) {
	o.Description = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DFIQApproach) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQApproach) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DFIQApproach) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DFIQApproach) SetTags(v []string) {
	o.Tags = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *DFIQApproach) GetReferences() []string {
	if o == nil || IsNil(o.References) {
		var ret []string
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQApproach) GetReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *DFIQApproach) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []string and assigns it to the References field.
func (o *DFIQApproach) SetReferences(v []string) {
	o.References = v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DFIQApproach) GetNotes() DFIQApproachNotes {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret DFIQApproachNotes
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DFIQApproach) GetNotesOk() (*DFIQApproachNotes, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *DFIQApproach) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableDFIQApproachNotes and assigns it to the Notes field.
func (o *DFIQApproach) SetNotes(v DFIQApproachNotes) {
	o.Notes.Set(&v)
}

// SetNotesNil sets the value for Notes to be an explicit nil
func (o *DFIQApproach) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *DFIQApproach) UnsetNotes() {
	o.Notes.Unset()
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *DFIQApproach) GetSteps() []DFIQApproachStep {
	if o == nil || IsNil(o.Steps) {
		var ret []DFIQApproachStep
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQApproach) GetStepsOk() ([]DFIQApproachStep, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *DFIQApproach) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []DFIQApproachStep and assigns it to the Steps field.
func (o *DFIQApproach) SetSteps(v []DFIQApproachStep) {
	o.Steps = v
}

func (o DFIQApproach) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DFIQApproach) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	return toSerialize, nil
}

func (o *DFIQApproach) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDFIQApproach := _DFIQApproach{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDFIQApproach)

	if err != nil {
		return err
	}

	*o = DFIQApproach(varDFIQApproach)

	return err
}

type NullableDFIQApproach struct {
	value *DFIQApproach
	isSet bool
}

func (v NullableDFIQApproach) Get() *DFIQApproach {
	return v.value
}

func (v *NullableDFIQApproach) Set(val *DFIQApproach) {
	v.value = val
	v.isSet = true
}

func (v NullableDFIQApproach) IsSet() bool {
	return v.isSet
}

func (v *NullableDFIQApproach) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDFIQApproach(val *DFIQApproach) *NullableDFIQApproach {
	return &NullableDFIQApproach{value: val, isSet: true}
}

func (v NullableDFIQApproach) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDFIQApproach) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
