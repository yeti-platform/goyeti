/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DFIQApproachStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DFIQApproachStep{}

// DFIQApproachStep struct for DFIQApproachStep
type DFIQApproachStep struct {
	Name        string         `json:"name"`
	Description NullableString `json:"description,omitempty"`
	Stage       string         `json:"stage"`
	Type        NullableString `json:"type,omitempty"`
	Value       NullableString `json:"value,omitempty"`
}

type _DFIQApproachStep DFIQApproachStep

// NewDFIQApproachStep instantiates a new DFIQApproachStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDFIQApproachStep(name string, stage string) *DFIQApproachStep {
	this := DFIQApproachStep{}
	this.Name = name
	this.Stage = stage
	return &this
}

// NewDFIQApproachStepWithDefaults instantiates a new DFIQApproachStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDFIQApproachStepWithDefaults() *DFIQApproachStep {
	this := DFIQApproachStep{}
	return &this
}

// GetName returns the Name field value
func (o *DFIQApproachStep) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DFIQApproachStep) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DFIQApproachStep) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DFIQApproachStep) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DFIQApproachStep) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DFIQApproachStep) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DFIQApproachStep) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DFIQApproachStep) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DFIQApproachStep) UnsetDescription() {
	o.Description.Unset()
}

// GetStage returns the Stage field value
func (o *DFIQApproachStep) GetStage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stage
}

// GetStageOk returns a tuple with the Stage field value
// and a boolean to check if the value has been set.
func (o *DFIQApproachStep) GetStageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stage, true
}

// SetStage sets field value
func (o *DFIQApproachStep) SetStage(v string) {
	o.Stage = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DFIQApproachStep) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DFIQApproachStep) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DFIQApproachStep) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *DFIQApproachStep) SetType(v string) {
	o.Type.Set(&v)
}

// SetTypeNil sets the value for Type to be an explicit nil
func (o *DFIQApproachStep) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DFIQApproachStep) UnsetType() {
	o.Type.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DFIQApproachStep) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DFIQApproachStep) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *DFIQApproachStep) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *DFIQApproachStep) SetValue(v string) {
	o.Value.Set(&v)
}

// SetValueNil sets the value for Value to be an explicit nil
func (o *DFIQApproachStep) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *DFIQApproachStep) UnsetValue() {
	o.Value.Unset()
}

func (o DFIQApproachStep) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DFIQApproachStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["stage"] = o.Stage
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return toSerialize, nil
}

func (o *DFIQApproachStep) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"stage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDFIQApproachStep := _DFIQApproachStep{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDFIQApproachStep)

	if err != nil {
		return err
	}

	*o = DFIQApproachStep(varDFIQApproachStep)

	return err
}

type NullableDFIQApproachStep struct {
	value *DFIQApproachStep
	isSet bool
}

func (v NullableDFIQApproachStep) Get() *DFIQApproachStep {
	return v.value
}

func (v *NullableDFIQApproachStep) Set(val *DFIQApproachStep) {
	v.value = val
	v.isSet = true
}

func (v NullableDFIQApproachStep) IsSet() bool {
	return v.isSet
}

func (v *NullableDFIQApproachStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDFIQApproachStep(val *DFIQApproachStep) *NullableDFIQApproachStep {
	return &NullableDFIQApproachStep{value: val, isSet: true}
}

func (v NullableDFIQApproachStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDFIQApproachStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
