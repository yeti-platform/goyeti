/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DFIQScenario type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DFIQScenario{}

// DFIQScenario struct for DFIQScenario
type DFIQScenario struct {
	Name         string         `json:"name"`
	Uuid         NullableString `json:"uuid,omitempty"`
	DfiqId       NullableString `json:"dfiq_id,omitempty"`
	DfiqVersion  string         `json:"dfiq_version"`
	DfiqTags     []string       `json:"dfiq_tags,omitempty"`
	Contributors []string       `json:"contributors,omitempty"`
	DfiqYaml     string         `json:"dfiq_yaml"`
	Created      *time.Time     `json:"created,omitempty"`
	Modified     *time.Time     `json:"modified,omitempty"`
	Description  string         `json:"description"`
	Type         *string        `json:"type,omitempty"`
	Id           string         `json:"id"`
	RootType     string         `json:"root_type"`
}

type _DFIQScenario DFIQScenario

// NewDFIQScenario instantiates a new DFIQScenario object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDFIQScenario(name string, dfiqVersion string, dfiqYaml string, description string, id string, rootType string) *DFIQScenario {
	this := DFIQScenario{}
	this.Name = name
	this.DfiqVersion = dfiqVersion
	this.DfiqYaml = dfiqYaml
	this.Description = description
	var type_ string = "scenario"
	this.Type = &type_
	this.Id = id
	this.RootType = rootType
	return &this
}

// NewDFIQScenarioWithDefaults instantiates a new DFIQScenario object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDFIQScenarioWithDefaults() *DFIQScenario {
	this := DFIQScenario{}
	var type_ string = "scenario"
	this.Type = &type_
	return &this
}

// GetName returns the Name field value
func (o *DFIQScenario) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DFIQScenario) SetName(v string) {
	o.Name = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DFIQScenario) GetUuid() string {
	if o == nil || IsNil(o.Uuid.Get()) {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DFIQScenario) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *DFIQScenario) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *DFIQScenario) SetUuid(v string) {
	o.Uuid.Set(&v)
}

// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *DFIQScenario) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *DFIQScenario) UnsetUuid() {
	o.Uuid.Unset()
}

// GetDfiqId returns the DfiqId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DFIQScenario) GetDfiqId() string {
	if o == nil || IsNil(o.DfiqId.Get()) {
		var ret string
		return ret
	}
	return *o.DfiqId.Get()
}

// GetDfiqIdOk returns a tuple with the DfiqId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DFIQScenario) GetDfiqIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfiqId.Get(), o.DfiqId.IsSet()
}

// HasDfiqId returns a boolean if a field has been set.
func (o *DFIQScenario) HasDfiqId() bool {
	if o != nil && o.DfiqId.IsSet() {
		return true
	}

	return false
}

// SetDfiqId gets a reference to the given NullableString and assigns it to the DfiqId field.
func (o *DFIQScenario) SetDfiqId(v string) {
	o.DfiqId.Set(&v)
}

// SetDfiqIdNil sets the value for DfiqId to be an explicit nil
func (o *DFIQScenario) SetDfiqIdNil() {
	o.DfiqId.Set(nil)
}

// UnsetDfiqId ensures that no value is present for DfiqId, not even an explicit nil
func (o *DFIQScenario) UnsetDfiqId() {
	o.DfiqId.Unset()
}

// GetDfiqVersion returns the DfiqVersion field value
func (o *DFIQScenario) GetDfiqVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DfiqVersion
}

// GetDfiqVersionOk returns a tuple with the DfiqVersion field value
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetDfiqVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfiqVersion, true
}

// SetDfiqVersion sets field value
func (o *DFIQScenario) SetDfiqVersion(v string) {
	o.DfiqVersion = v
}

// GetDfiqTags returns the DfiqTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DFIQScenario) GetDfiqTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DfiqTags
}

// GetDfiqTagsOk returns a tuple with the DfiqTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DFIQScenario) GetDfiqTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.DfiqTags) {
		return nil, false
	}
	return o.DfiqTags, true
}

// HasDfiqTags returns a boolean if a field has been set.
func (o *DFIQScenario) HasDfiqTags() bool {
	if o != nil && !IsNil(o.DfiqTags) {
		return true
	}

	return false
}

// SetDfiqTags gets a reference to the given []string and assigns it to the DfiqTags field.
func (o *DFIQScenario) SetDfiqTags(v []string) {
	o.DfiqTags = v
}

// GetContributors returns the Contributors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DFIQScenario) GetContributors() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DFIQScenario) GetContributorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Contributors) {
		return nil, false
	}
	return o.Contributors, true
}

// HasContributors returns a boolean if a field has been set.
func (o *DFIQScenario) HasContributors() bool {
	if o != nil && !IsNil(o.Contributors) {
		return true
	}

	return false
}

// SetContributors gets a reference to the given []string and assigns it to the Contributors field.
func (o *DFIQScenario) SetContributors(v []string) {
	o.Contributors = v
}

// GetDfiqYaml returns the DfiqYaml field value
func (o *DFIQScenario) GetDfiqYaml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DfiqYaml
}

// GetDfiqYamlOk returns a tuple with the DfiqYaml field value
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetDfiqYamlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfiqYaml, true
}

// SetDfiqYaml sets field value
func (o *DFIQScenario) SetDfiqYaml(v string) {
	o.DfiqYaml = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DFIQScenario) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DFIQScenario) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DFIQScenario) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *DFIQScenario) GetModified() time.Time {
	if o == nil || IsNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *DFIQScenario) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *DFIQScenario) SetModified(v time.Time) {
	o.Modified = &v
}

// GetDescription returns the Description field value
func (o *DFIQScenario) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DFIQScenario) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DFIQScenario) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DFIQScenario) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DFIQScenario) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value
func (o *DFIQScenario) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DFIQScenario) SetId(v string) {
	o.Id = v
}

// GetRootType returns the RootType field value
func (o *DFIQScenario) GetRootType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootType
}

// GetRootTypeOk returns a tuple with the RootType field value
// and a boolean to check if the value has been set.
func (o *DFIQScenario) GetRootTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootType, true
}

// SetRootType sets field value
func (o *DFIQScenario) SetRootType(v string) {
	o.RootType = v
}

func (o DFIQScenario) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DFIQScenario) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.DfiqId.IsSet() {
		toSerialize["dfiq_id"] = o.DfiqId.Get()
	}
	toSerialize["dfiq_version"] = o.DfiqVersion
	if o.DfiqTags != nil {
		toSerialize["dfiq_tags"] = o.DfiqTags
	}
	if o.Contributors != nil {
		toSerialize["contributors"] = o.Contributors
	}
	toSerialize["dfiq_yaml"] = o.DfiqYaml
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["id"] = o.Id
	toSerialize["root_type"] = o.RootType
	return toSerialize, nil
}

func (o *DFIQScenario) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"dfiq_version",
		"dfiq_yaml",
		"description",
		"id",
		"root_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDFIQScenario := _DFIQScenario{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDFIQScenario)

	if err != nil {
		return err
	}

	*o = DFIQScenario(varDFIQScenario)

	return err
}

type NullableDFIQScenario struct {
	value *DFIQScenario
	isSet bool
}

func (v NullableDFIQScenario) Get() *DFIQScenario {
	return v.value
}

func (v *NullableDFIQScenario) Set(val *DFIQScenario) {
	v.value = val
	v.isSet = true
}

func (v NullableDFIQScenario) IsSet() bool {
	return v.isSet
}

func (v *NullableDFIQScenario) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDFIQScenario(val *DFIQScenario) *NullableDFIQScenario {
	return &NullableDFIQScenario{value: val, isSet: true}
}

func (v NullableDFIQScenario) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDFIQScenario) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
