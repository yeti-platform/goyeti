/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
)

// checks if the DFIQSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DFIQSearchRequest{}

// DFIQSearchRequest struct for DFIQSearchRequest
type DFIQSearchRequest struct {
	Query                map[string]QueryValue  `json:"query,omitempty"`
	Type                 *DFIQSearchRequestType `json:"type,omitempty"`
	Sorting              [][]interface{}        `json:"sorting,omitempty"`
	FilterAliases        [][]interface{}        `json:"filter_aliases,omitempty"`
	Count                *int32                 `json:"count,omitempty"`
	Page                 *int32                 `json:"page,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DFIQSearchRequest DFIQSearchRequest

// NewDFIQSearchRequest instantiates a new DFIQSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDFIQSearchRequest() *DFIQSearchRequest {
	this := DFIQSearchRequest{}
	var count int32 = 50
	this.Count = &count
	var page int32 = 0
	this.Page = &page
	return &this
}

// NewDFIQSearchRequestWithDefaults instantiates a new DFIQSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDFIQSearchRequestWithDefaults() *DFIQSearchRequest {
	this := DFIQSearchRequest{}
	var count int32 = 50
	this.Count = &count
	var page int32 = 0
	this.Page = &page
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *DFIQSearchRequest) GetQuery() map[string]QueryValue {
	if o == nil || IsNil(o.Query) {
		var ret map[string]QueryValue
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQSearchRequest) GetQueryOk() (map[string]QueryValue, bool) {
	if o == nil || IsNil(o.Query) {
		return map[string]QueryValue{}, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *DFIQSearchRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given map[string]QueryValue and assigns it to the Query field.
func (o *DFIQSearchRequest) SetQuery(v map[string]QueryValue) {
	o.Query = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DFIQSearchRequest) GetType() DFIQSearchRequestType {
	if o == nil || IsNil(o.Type) {
		var ret DFIQSearchRequestType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQSearchRequest) GetTypeOk() (*DFIQSearchRequestType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DFIQSearchRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DFIQSearchRequestType and assigns it to the Type field.
func (o *DFIQSearchRequest) SetType(v DFIQSearchRequestType) {
	o.Type = &v
}

// GetSorting returns the Sorting field value if set, zero value otherwise.
func (o *DFIQSearchRequest) GetSorting() [][]interface{} {
	if o == nil || IsNil(o.Sorting) {
		var ret [][]interface{}
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQSearchRequest) GetSortingOk() ([][]interface{}, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *DFIQSearchRequest) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given [][]interface{} and assigns it to the Sorting field.
func (o *DFIQSearchRequest) SetSorting(v [][]interface{}) {
	o.Sorting = v
}

// GetFilterAliases returns the FilterAliases field value if set, zero value otherwise.
func (o *DFIQSearchRequest) GetFilterAliases() [][]interface{} {
	if o == nil || IsNil(o.FilterAliases) {
		var ret [][]interface{}
		return ret
	}
	return o.FilterAliases
}

// GetFilterAliasesOk returns a tuple with the FilterAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQSearchRequest) GetFilterAliasesOk() ([][]interface{}, bool) {
	if o == nil || IsNil(o.FilterAliases) {
		return nil, false
	}
	return o.FilterAliases, true
}

// HasFilterAliases returns a boolean if a field has been set.
func (o *DFIQSearchRequest) HasFilterAliases() bool {
	if o != nil && !IsNil(o.FilterAliases) {
		return true
	}

	return false
}

// SetFilterAliases gets a reference to the given [][]interface{} and assigns it to the FilterAliases field.
func (o *DFIQSearchRequest) SetFilterAliases(v [][]interface{}) {
	o.FilterAliases = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *DFIQSearchRequest) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQSearchRequest) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *DFIQSearchRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *DFIQSearchRequest) SetCount(v int32) {
	o.Count = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *DFIQSearchRequest) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQSearchRequest) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *DFIQSearchRequest) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *DFIQSearchRequest) SetPage(v int32) {
	o.Page = &v
}

func (o DFIQSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DFIQSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Sorting) {
		toSerialize["sorting"] = o.Sorting
	}
	if !IsNil(o.FilterAliases) {
		toSerialize["filter_aliases"] = o.FilterAliases
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DFIQSearchRequest) UnmarshalJSON(data []byte) (err error) {
	varDFIQSearchRequest := _DFIQSearchRequest{}

	err = json.Unmarshal(data, &varDFIQSearchRequest)

	if err != nil {
		return err
	}

	*o = DFIQSearchRequest(varDFIQSearchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "query")
		delete(additionalProperties, "type")
		delete(additionalProperties, "sorting")
		delete(additionalProperties, "filter_aliases")
		delete(additionalProperties, "count")
		delete(additionalProperties, "page")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDFIQSearchRequest struct {
	value *DFIQSearchRequest
	isSet bool
}

func (v NullableDFIQSearchRequest) Get() *DFIQSearchRequest {
	return v.value
}

func (v *NullableDFIQSearchRequest) Set(val *DFIQSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDFIQSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDFIQSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDFIQSearchRequest(val *DFIQSearchRequest) *NullableDFIQSearchRequest {
	return &NullableDFIQSearchRequest{value: val, isSet: true}
}

func (v NullableDFIQSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDFIQSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
