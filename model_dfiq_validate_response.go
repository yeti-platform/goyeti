/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the DFIQValidateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DFIQValidateResponse{}

// DFIQValidateResponse struct for DFIQValidateResponse
type DFIQValidateResponse struct {
	Valid                bool    `json:"valid"`
	Error                *Error  `json:"error,omitempty"`
	ErrorType            *string `json:"error_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DFIQValidateResponse DFIQValidateResponse

// NewDFIQValidateResponse instantiates a new DFIQValidateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDFIQValidateResponse(valid bool) *DFIQValidateResponse {
	this := DFIQValidateResponse{}
	this.Valid = valid
	var error_ Error
	this.Error = &error_
	var errorType string = "message"
	this.ErrorType = &errorType
	return &this
}

// NewDFIQValidateResponseWithDefaults instantiates a new DFIQValidateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDFIQValidateResponseWithDefaults() *DFIQValidateResponse {
	this := DFIQValidateResponse{}
	var error_ Error
	this.Error = &error_
	var errorType string = "message"
	this.ErrorType = &errorType
	return &this
}

// GetValid returns the Valid field value
func (o *DFIQValidateResponse) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *DFIQValidateResponse) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *DFIQValidateResponse) SetValid(v bool) {
	o.Valid = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DFIQValidateResponse) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQValidateResponse) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DFIQValidateResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *DFIQValidateResponse) SetError(v Error) {
	o.Error = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *DFIQValidateResponse) GetErrorType() string {
	if o == nil || IsNil(o.ErrorType) {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DFIQValidateResponse) GetErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorType) {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *DFIQValidateResponse) HasErrorType() bool {
	if o != nil && !IsNil(o.ErrorType) {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *DFIQValidateResponse) SetErrorType(v string) {
	o.ErrorType = &v
}

func (o DFIQValidateResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DFIQValidateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["valid"] = o.Valid
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ErrorType) {
		toSerialize["error_type"] = o.ErrorType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DFIQValidateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"valid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDFIQValidateResponse := _DFIQValidateResponse{}

	err = json.Unmarshal(data, &varDFIQValidateResponse)

	if err != nil {
		return err
	}

	*o = DFIQValidateResponse(varDFIQValidateResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "valid")
		delete(additionalProperties, "error")
		delete(additionalProperties, "error_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDFIQValidateResponse struct {
	value *DFIQValidateResponse
	isSet bool
}

func (v NullableDFIQValidateResponse) Get() *DFIQValidateResponse {
	return v.value
}

func (v *NullableDFIQValidateResponse) Set(val *DFIQValidateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDFIQValidateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDFIQValidateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDFIQValidateResponse(val *DFIQValidateResponse) *NullableDFIQValidateResponse {
	return &NullableDFIQValidateResponse{value: val, isSet: true}
}

func (v NullableDFIQValidateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDFIQValidateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
