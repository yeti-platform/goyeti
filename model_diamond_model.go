/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// DiamondModel the model 'DiamondModel'
type DiamondModel string

// List of DiamondModel
const (
	ADVERSARY      DiamondModel = "adversary"
	CAPABILITY     DiamondModel = "capability"
	INFRASTRUCTURE DiamondModel = "infrastructure"
	VICTIM         DiamondModel = "victim"
)

// All allowed values of DiamondModel enum
var AllowedDiamondModelEnumValues = []DiamondModel{
	"adversary",
	"capability",
	"infrastructure",
	"victim",
}

func (v *DiamondModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiamondModel(value)
	for _, existing := range AllowedDiamondModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiamondModel", value)
}

// NewDiamondModelFromValue returns a pointer to a valid DiamondModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiamondModelFromValue(v string) (*DiamondModel, error) {
	ev := DiamondModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiamondModel: valid values are %v", v, AllowedDiamondModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiamondModel) IsValid() bool {
	for _, existing := range AllowedDiamondModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiamondModel value
func (v DiamondModel) Ptr() *DiamondModel {
	return &v
}

type NullableDiamondModel struct {
	value *DiamondModel
	isSet bool
}

func (v NullableDiamondModel) Get() *DiamondModel {
	return v.value
}

func (v *NullableDiamondModel) Set(val *DiamondModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDiamondModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDiamondModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiamondModel(val *DiamondModel) *NullableDiamondModel {
	return &NullableDiamondModel{value: val, isSet: true}
}

func (v NullableDiamondModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiamondModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
