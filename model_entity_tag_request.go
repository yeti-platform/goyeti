/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the EntityTagRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityTagRequest{}

// EntityTagRequest struct for EntityTagRequest
type EntityTagRequest struct {
	Ids                  []string `json:"ids"`
	Tags                 []string `json:"tags,omitempty"`
	Strict               *bool    `json:"strict,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityTagRequest EntityTagRequest

// NewEntityTagRequest instantiates a new EntityTagRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityTagRequest(ids []string) *EntityTagRequest {
	this := EntityTagRequest{}
	this.Ids = ids
	var strict bool = false
	this.Strict = &strict
	return &this
}

// NewEntityTagRequestWithDefaults instantiates a new EntityTagRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityTagRequestWithDefaults() *EntityTagRequest {
	this := EntityTagRequest{}
	var strict bool = false
	this.Strict = &strict
	return &this
}

// GetIds returns the Ids field value
func (o *EntityTagRequest) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *EntityTagRequest) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *EntityTagRequest) SetIds(v []string) {
	o.Ids = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EntityTagRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTagRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EntityTagRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EntityTagRequest) SetTags(v []string) {
	o.Tags = v
}

// GetStrict returns the Strict field value if set, zero value otherwise.
func (o *EntityTagRequest) GetStrict() bool {
	if o == nil || IsNil(o.Strict) {
		var ret bool
		return ret
	}
	return *o.Strict
}

// GetStrictOk returns a tuple with the Strict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTagRequest) GetStrictOk() (*bool, bool) {
	if o == nil || IsNil(o.Strict) {
		return nil, false
	}
	return o.Strict, true
}

// HasStrict returns a boolean if a field has been set.
func (o *EntityTagRequest) HasStrict() bool {
	if o != nil && !IsNil(o.Strict) {
		return true
	}

	return false
}

// SetStrict gets a reference to the given bool and assigns it to the Strict field.
func (o *EntityTagRequest) SetStrict(v bool) {
	o.Strict = &v
}

func (o EntityTagRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityTagRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ids"] = o.Ids
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Strict) {
		toSerialize["strict"] = o.Strict
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityTagRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntityTagRequest := _EntityTagRequest{}

	err = json.Unmarshal(data, &varEntityTagRequest)

	if err != nil {
		return err
	}

	*o = EntityTagRequest(varEntityTagRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ids")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "strict")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityTagRequest struct {
	value *EntityTagRequest
	isSet bool
}

func (v NullableEntityTagRequest) Get() *EntityTagRequest {
	return v.value
}

func (v *NullableEntityTagRequest) Set(val *EntityTagRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTagRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTagRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTagRequest(val *EntityTagRequest) *NullableEntityTagRequest {
	return &NullableEntityTagRequest{value: val, isSet: true}
}

func (v NullableEntityTagRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTagRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
