/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the EntityTagResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityTagResponse{}

// EntityTagResponse struct for EntityTagResponse
type EntityTagResponse struct {
	Tagged               int32                                       `json:"tagged"`
	Tags                 map[string]map[string]TagRelationshipOutput `json:"tags"`
	AdditionalProperties map[string]interface{}
}

type _EntityTagResponse EntityTagResponse

// NewEntityTagResponse instantiates a new EntityTagResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityTagResponse(tagged int32, tags map[string]map[string]TagRelationshipOutput) *EntityTagResponse {
	this := EntityTagResponse{}
	this.Tagged = tagged
	this.Tags = tags
	return &this
}

// NewEntityTagResponseWithDefaults instantiates a new EntityTagResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityTagResponseWithDefaults() *EntityTagResponse {
	this := EntityTagResponse{}
	return &this
}

// GetTagged returns the Tagged field value
func (o *EntityTagResponse) GetTagged() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Tagged
}

// GetTaggedOk returns a tuple with the Tagged field value
// and a boolean to check if the value has been set.
func (o *EntityTagResponse) GetTaggedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tagged, true
}

// SetTagged sets field value
func (o *EntityTagResponse) SetTagged(v int32) {
	o.Tagged = v
}

// GetTags returns the Tags field value
func (o *EntityTagResponse) GetTags() map[string]map[string]TagRelationshipOutput {
	if o == nil {
		var ret map[string]map[string]TagRelationshipOutput
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *EntityTagResponse) GetTagsOk() (map[string]map[string]TagRelationshipOutput, bool) {
	if o == nil {
		return map[string]map[string]TagRelationshipOutput{}, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *EntityTagResponse) SetTags(v map[string]map[string]TagRelationshipOutput) {
	o.Tags = v
}

func (o EntityTagResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityTagResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tagged"] = o.Tagged
	toSerialize["tags"] = o.Tags

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityTagResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tagged",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntityTagResponse := _EntityTagResponse{}

	err = json.Unmarshal(data, &varEntityTagResponse)

	if err != nil {
		return err
	}

	*o = EntityTagResponse(varEntityTagResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tagged")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityTagResponse struct {
	value *EntityTagResponse
	isSet bool
}

func (v NullableEntityTagResponse) Get() *EntityTagResponse {
	return v.value
}

func (v *NullableEntityTagResponse) Set(val *EntityTagResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTagResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTagResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTagResponse(val *EntityTagResponse) *NullableEntityTagResponse {
	return &NullableEntityTagResponse{value: val, isSet: true}
}

func (v NullableEntityTagResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTagResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
