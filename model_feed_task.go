/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the FeedTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedTask{}

// FeedTask struct for FeedTask
type FeedTask struct {
	Name          string         `json:"name"`
	Enabled       *bool          `json:"enabled,omitempty"`
	Description   *string        `json:"description,omitempty"`
	Status        *TaskStatus    `json:"status,omitempty"`
	StatusMessage *string        `json:"status_message,omitempty"`
	LastRun       NullableTime   `json:"last_run,omitempty"`
	Frequency     NullableString `json:"frequency,omitempty"`
	Type          *string        `json:"type,omitempty"`
	Id            string         `json:"id"`
}

type _FeedTask FeedTask

// NewFeedTask instantiates a new FeedTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedTask(name string, id string) *FeedTask {
	this := FeedTask{}
	this.Name = name
	var enabled bool = false
	this.Enabled = &enabled
	var description string = ""
	this.Description = &description
	var statusMessage string = ""
	this.StatusMessage = &statusMessage
	var type_ string = "feed"
	this.Type = &type_
	this.Id = id
	return &this
}

// NewFeedTaskWithDefaults instantiates a new FeedTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedTaskWithDefaults() *FeedTask {
	this := FeedTask{}
	var enabled bool = false
	this.Enabled = &enabled
	var description string = ""
	this.Description = &description
	var statusMessage string = ""
	this.StatusMessage = &statusMessage
	var type_ string = "feed"
	this.Type = &type_
	return &this
}

// GetName returns the Name field value
func (o *FeedTask) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeedTask) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeedTask) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FeedTask) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedTask) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FeedTask) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FeedTask) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FeedTask) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedTask) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FeedTask) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FeedTask) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FeedTask) GetStatus() TaskStatus {
	if o == nil || IsNil(o.Status) {
		var ret TaskStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedTask) GetStatusOk() (*TaskStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FeedTask) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TaskStatus and assigns it to the Status field.
func (o *FeedTask) SetStatus(v TaskStatus) {
	o.Status = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *FeedTask) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedTask) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *FeedTask) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *FeedTask) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

// GetLastRun returns the LastRun field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeedTask) GetLastRun() time.Time {
	if o == nil || IsNil(o.LastRun.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastRun.Get()
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeedTask) GetLastRunOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastRun.Get(), o.LastRun.IsSet()
}

// HasLastRun returns a boolean if a field has been set.
func (o *FeedTask) HasLastRun() bool {
	if o != nil && o.LastRun.IsSet() {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given NullableTime and assigns it to the LastRun field.
func (o *FeedTask) SetLastRun(v time.Time) {
	o.LastRun.Set(&v)
}

// SetLastRunNil sets the value for LastRun to be an explicit nil
func (o *FeedTask) SetLastRunNil() {
	o.LastRun.Set(nil)
}

// UnsetLastRun ensures that no value is present for LastRun, not even an explicit nil
func (o *FeedTask) UnsetLastRun() {
	o.LastRun.Unset()
}

// GetFrequency returns the Frequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeedTask) GetFrequency() string {
	if o == nil || IsNil(o.Frequency.Get()) {
		var ret string
		return ret
	}
	return *o.Frequency.Get()
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeedTask) GetFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Frequency.Get(), o.Frequency.IsSet()
}

// HasFrequency returns a boolean if a field has been set.
func (o *FeedTask) HasFrequency() bool {
	if o != nil && o.Frequency.IsSet() {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given NullableString and assigns it to the Frequency field.
func (o *FeedTask) SetFrequency(v string) {
	o.Frequency.Set(&v)
}

// SetFrequencyNil sets the value for Frequency to be an explicit nil
func (o *FeedTask) SetFrequencyNil() {
	o.Frequency.Set(nil)
}

// UnsetFrequency ensures that no value is present for Frequency, not even an explicit nil
func (o *FeedTask) UnsetFrequency() {
	o.Frequency.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FeedTask) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedTask) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FeedTask) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FeedTask) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value
func (o *FeedTask) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FeedTask) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FeedTask) SetId(v string) {
	o.Id = v
}

func (o FeedTask) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusMessage) {
		toSerialize["status_message"] = o.StatusMessage
	}
	if o.LastRun.IsSet() {
		toSerialize["last_run"] = o.LastRun.Get()
	}
	if o.Frequency.IsSet() {
		toSerialize["frequency"] = o.Frequency.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *FeedTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeedTask := _FeedTask{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeedTask)

	if err != nil {
		return err
	}

	*o = FeedTask(varFeedTask)

	return err
}

type NullableFeedTask struct {
	value *FeedTask
	isSet bool
}

func (v NullableFeedTask) Get() *FeedTask {
	return v.value
}

func (v *NullableFeedTask) Set(val *FeedTask) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedTask) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedTask(val *FeedTask) *NullableFeedTask {
	return &NullableFeedTask{value: val, isSet: true}
}

func (v NullableFeedTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
