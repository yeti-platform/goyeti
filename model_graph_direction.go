/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// GraphDirection the model 'GraphDirection'
type GraphDirection string

// List of GraphDirection
const (
	OUTBOUND GraphDirection = "outbound"
	INBOUND  GraphDirection = "inbound"
	ANY      GraphDirection = "any"
)

// All allowed values of GraphDirection enum
var AllowedGraphDirectionEnumValues = []GraphDirection{
	"outbound",
	"inbound",
	"any",
}

func (v *GraphDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GraphDirection(value)
	for _, existing := range AllowedGraphDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GraphDirection", value)
}

// NewGraphDirectionFromValue returns a pointer to a valid GraphDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGraphDirectionFromValue(v string) (*GraphDirection, error) {
	ev := GraphDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GraphDirection: valid values are %v", v, AllowedGraphDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GraphDirection) IsValid() bool {
	for _, existing := range AllowedGraphDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GraphDirection value
func (v GraphDirection) Ptr() *GraphDirection {
	return &v
}

type NullableGraphDirection struct {
	value *GraphDirection
	isSet bool
}

func (v NullableGraphDirection) Get() *GraphDirection {
	return v.value
}

func (v *NullableGraphDirection) Set(val *GraphDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphDirection(val *GraphDirection) *NullableGraphDirection {
	return &NullableGraphDirection{value: val, isSet: true}
}

func (v NullableGraphDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
