/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the GraphSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphSearchRequest{}

// GraphSearchRequest struct for GraphSearchRequest
type GraphSearchRequest struct {
	Source               string          `json:"source"`
	LinkTypes            []string        `json:"link_types,omitempty"`
	TargetTypes          []string        `json:"target_types,omitempty"`
	Hops                 *Hops           `json:"hops,omitempty"`
	MinHops              *MinHops        `json:"min_hops,omitempty"`
	MaxHops              *MaxHops        `json:"max_hops,omitempty"`
	Graph                string          `json:"graph"`
	Direction            GraphDirection  `json:"direction"`
	Filter               []GraphFilter   `json:"filter,omitempty"`
	IncludeOriginal      bool            `json:"include_original"`
	Count                *int32          `json:"count,omitempty"`
	Page                 *int32          `json:"page,omitempty"`
	Sorting              [][]interface{} `json:"sorting,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GraphSearchRequest GraphSearchRequest

// NewGraphSearchRequest instantiates a new GraphSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphSearchRequest(source string, graph string, direction GraphDirection, includeOriginal bool) *GraphSearchRequest {
	this := GraphSearchRequest{}
	this.Source = source
	this.Graph = graph
	this.Direction = direction
	this.IncludeOriginal = includeOriginal
	var count int32 = 50
	this.Count = &count
	var page int32 = 0
	this.Page = &page
	return &this
}

// NewGraphSearchRequestWithDefaults instantiates a new GraphSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphSearchRequestWithDefaults() *GraphSearchRequest {
	this := GraphSearchRequest{}
	var count int32 = 50
	this.Count = &count
	var page int32 = 0
	this.Page = &page
	return &this
}

// GetSource returns the Source field value
func (o *GraphSearchRequest) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *GraphSearchRequest) SetSource(v string) {
	o.Source = v
}

// GetLinkTypes returns the LinkTypes field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetLinkTypes() []string {
	if o == nil || IsNil(o.LinkTypes) {
		var ret []string
		return ret
	}
	return o.LinkTypes
}

// GetLinkTypesOk returns a tuple with the LinkTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetLinkTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.LinkTypes) {
		return nil, false
	}
	return o.LinkTypes, true
}

// HasLinkTypes returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasLinkTypes() bool {
	if o != nil && !IsNil(o.LinkTypes) {
		return true
	}

	return false
}

// SetLinkTypes gets a reference to the given []string and assigns it to the LinkTypes field.
func (o *GraphSearchRequest) SetLinkTypes(v []string) {
	o.LinkTypes = v
}

// GetTargetTypes returns the TargetTypes field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetTargetTypes() []string {
	if o == nil || IsNil(o.TargetTypes) {
		var ret []string
		return ret
	}
	return o.TargetTypes
}

// GetTargetTypesOk returns a tuple with the TargetTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetTargetTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetTypes) {
		return nil, false
	}
	return o.TargetTypes, true
}

// HasTargetTypes returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasTargetTypes() bool {
	if o != nil && !IsNil(o.TargetTypes) {
		return true
	}

	return false
}

// SetTargetTypes gets a reference to the given []string and assigns it to the TargetTypes field.
func (o *GraphSearchRequest) SetTargetTypes(v []string) {
	o.TargetTypes = v
}

// GetHops returns the Hops field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetHops() Hops {
	if o == nil || IsNil(o.Hops) {
		var ret Hops
		return ret
	}
	return *o.Hops
}

// GetHopsOk returns a tuple with the Hops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetHopsOk() (*Hops, bool) {
	if o == nil || IsNil(o.Hops) {
		return nil, false
	}
	return o.Hops, true
}

// HasHops returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasHops() bool {
	if o != nil && !IsNil(o.Hops) {
		return true
	}

	return false
}

// SetHops gets a reference to the given Hops and assigns it to the Hops field.
func (o *GraphSearchRequest) SetHops(v Hops) {
	o.Hops = &v
}

// GetMinHops returns the MinHops field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetMinHops() MinHops {
	if o == nil || IsNil(o.MinHops) {
		var ret MinHops
		return ret
	}
	return *o.MinHops
}

// GetMinHopsOk returns a tuple with the MinHops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetMinHopsOk() (*MinHops, bool) {
	if o == nil || IsNil(o.MinHops) {
		return nil, false
	}
	return o.MinHops, true
}

// HasMinHops returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasMinHops() bool {
	if o != nil && !IsNil(o.MinHops) {
		return true
	}

	return false
}

// SetMinHops gets a reference to the given MinHops and assigns it to the MinHops field.
func (o *GraphSearchRequest) SetMinHops(v MinHops) {
	o.MinHops = &v
}

// GetMaxHops returns the MaxHops field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetMaxHops() MaxHops {
	if o == nil || IsNil(o.MaxHops) {
		var ret MaxHops
		return ret
	}
	return *o.MaxHops
}

// GetMaxHopsOk returns a tuple with the MaxHops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetMaxHopsOk() (*MaxHops, bool) {
	if o == nil || IsNil(o.MaxHops) {
		return nil, false
	}
	return o.MaxHops, true
}

// HasMaxHops returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasMaxHops() bool {
	if o != nil && !IsNil(o.MaxHops) {
		return true
	}

	return false
}

// SetMaxHops gets a reference to the given MaxHops and assigns it to the MaxHops field.
func (o *GraphSearchRequest) SetMaxHops(v MaxHops) {
	o.MaxHops = &v
}

// GetGraph returns the Graph field value
func (o *GraphSearchRequest) GetGraph() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Graph
}

// GetGraphOk returns a tuple with the Graph field value
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetGraphOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Graph, true
}

// SetGraph sets field value
func (o *GraphSearchRequest) SetGraph(v string) {
	o.Graph = v
}

// GetDirection returns the Direction field value
func (o *GraphSearchRequest) GetDirection() GraphDirection {
	if o == nil {
		var ret GraphDirection
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetDirectionOk() (*GraphDirection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *GraphSearchRequest) SetDirection(v GraphDirection) {
	o.Direction = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetFilter() []GraphFilter {
	if o == nil || IsNil(o.Filter) {
		var ret []GraphFilter
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetFilterOk() ([]GraphFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []GraphFilter and assigns it to the Filter field.
func (o *GraphSearchRequest) SetFilter(v []GraphFilter) {
	o.Filter = v
}

// GetIncludeOriginal returns the IncludeOriginal field value
func (o *GraphSearchRequest) GetIncludeOriginal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncludeOriginal
}

// GetIncludeOriginalOk returns a tuple with the IncludeOriginal field value
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetIncludeOriginalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeOriginal, true
}

// SetIncludeOriginal sets field value
func (o *GraphSearchRequest) SetIncludeOriginal(v bool) {
	o.IncludeOriginal = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *GraphSearchRequest) SetCount(v int32) {
	o.Count = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *GraphSearchRequest) SetPage(v int32) {
	o.Page = &v
}

// GetSorting returns the Sorting field value if set, zero value otherwise.
func (o *GraphSearchRequest) GetSorting() [][]interface{} {
	if o == nil || IsNil(o.Sorting) {
		var ret [][]interface{}
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSearchRequest) GetSortingOk() ([][]interface{}, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *GraphSearchRequest) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given [][]interface{} and assigns it to the Sorting field.
func (o *GraphSearchRequest) SetSorting(v [][]interface{}) {
	o.Sorting = v
}

func (o GraphSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	if !IsNil(o.LinkTypes) {
		toSerialize["link_types"] = o.LinkTypes
	}
	if !IsNil(o.TargetTypes) {
		toSerialize["target_types"] = o.TargetTypes
	}
	if !IsNil(o.Hops) {
		toSerialize["hops"] = o.Hops
	}
	if !IsNil(o.MinHops) {
		toSerialize["min_hops"] = o.MinHops
	}
	if !IsNil(o.MaxHops) {
		toSerialize["max_hops"] = o.MaxHops
	}
	toSerialize["graph"] = o.Graph
	toSerialize["direction"] = o.Direction
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	toSerialize["include_original"] = o.IncludeOriginal
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Sorting) {
		toSerialize["sorting"] = o.Sorting
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GraphSearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"graph",
		"direction",
		"include_original",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGraphSearchRequest := _GraphSearchRequest{}

	err = json.Unmarshal(data, &varGraphSearchRequest)

	if err != nil {
		return err
	}

	*o = GraphSearchRequest(varGraphSearchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "source")
		delete(additionalProperties, "link_types")
		delete(additionalProperties, "target_types")
		delete(additionalProperties, "hops")
		delete(additionalProperties, "min_hops")
		delete(additionalProperties, "max_hops")
		delete(additionalProperties, "graph")
		delete(additionalProperties, "direction")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "include_original")
		delete(additionalProperties, "count")
		delete(additionalProperties, "page")
		delete(additionalProperties, "sorting")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGraphSearchRequest struct {
	value *GraphSearchRequest
	isSet bool
}

func (v NullableGraphSearchRequest) Get() *GraphSearchRequest {
	return v.value
}

func (v *NullableGraphSearchRequest) Set(val *GraphSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphSearchRequest(val *GraphSearchRequest) *NullableGraphSearchRequest {
	return &NullableGraphSearchRequest{value: val, isSet: true}
}

func (v NullableGraphSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
