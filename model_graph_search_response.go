/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the GraphSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphSearchResponse{}

// GraphSearchResponse struct for GraphSearchResponse
type GraphSearchResponse struct {
	Vertices             map[string]VerticesValue `json:"vertices"`
	Paths                [][]PathsInnerInner      `json:"paths"`
	Total                int32                    `json:"total"`
	AdditionalProperties map[string]interface{}
}

type _GraphSearchResponse GraphSearchResponse

// NewGraphSearchResponse instantiates a new GraphSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphSearchResponse(vertices map[string]VerticesValue, paths [][]PathsInnerInner, total int32) *GraphSearchResponse {
	this := GraphSearchResponse{}
	this.Vertices = vertices
	this.Paths = paths
	this.Total = total
	return &this
}

// NewGraphSearchResponseWithDefaults instantiates a new GraphSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphSearchResponseWithDefaults() *GraphSearchResponse {
	this := GraphSearchResponse{}
	return &this
}

// GetVertices returns the Vertices field value
func (o *GraphSearchResponse) GetVertices() map[string]VerticesValue {
	if o == nil {
		var ret map[string]VerticesValue
		return ret
	}

	return o.Vertices
}

// GetVerticesOk returns a tuple with the Vertices field value
// and a boolean to check if the value has been set.
func (o *GraphSearchResponse) GetVerticesOk() (map[string]VerticesValue, bool) {
	if o == nil {
		return map[string]VerticesValue{}, false
	}
	return o.Vertices, true
}

// SetVertices sets field value
func (o *GraphSearchResponse) SetVertices(v map[string]VerticesValue) {
	o.Vertices = v
}

// GetPaths returns the Paths field value
func (o *GraphSearchResponse) GetPaths() [][]PathsInnerInner {
	if o == nil {
		var ret [][]PathsInnerInner
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *GraphSearchResponse) GetPathsOk() ([][]PathsInnerInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *GraphSearchResponse) SetPaths(v [][]PathsInnerInner) {
	o.Paths = v
}

// GetTotal returns the Total field value
func (o *GraphSearchResponse) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *GraphSearchResponse) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *GraphSearchResponse) SetTotal(v int32) {
	o.Total = v
}

func (o GraphSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vertices"] = o.Vertices
	toSerialize["paths"] = o.Paths
	toSerialize["total"] = o.Total

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GraphSearchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vertices",
		"paths",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGraphSearchResponse := _GraphSearchResponse{}

	err = json.Unmarshal(data, &varGraphSearchResponse)

	if err != nil {
		return err
	}

	*o = GraphSearchResponse(varGraphSearchResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vertices")
		delete(additionalProperties, "paths")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGraphSearchResponse struct {
	value *GraphSearchResponse
	isSet bool
}

func (v NullableGraphSearchResponse) Get() *GraphSearchResponse {
	return v.value
}

func (v *NullableGraphSearchResponse) Set(val *GraphSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphSearchResponse(val *GraphSearchResponse) *NullableGraphSearchResponse {
	return &NullableGraphSearchResponse{value: val, isSet: true}
}

func (v NullableGraphSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
