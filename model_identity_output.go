/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the IdentityOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityOutput{}

// IdentityOutput struct for IdentityOutput
type IdentityOutput struct {
	Type                    *string                          `json:"type,omitempty"`
	Name                    string                           `json:"name"`
	Description             *string                          `json:"description,omitempty"`
	Context                 []map[string]interface{}         `json:"context,omitempty"`
	Created                 *time.Time                       `json:"created,omitempty"`
	Modified                *time.Time                       `json:"modified,omitempty"`
	IdentityClass           *string                          `json:"identity_class,omitempty"`
	Sectors                 []string                         `json:"sectors,omitempty"`
	ContactInformation      *string                          `json:"contact_information,omitempty"`
	Id                      string                           `json:"id"`
	Tags                    map[string]TagRelationshipOutput `json:"tags"`
	RootType                string                           `json:"root_type"`
	RelatedObservablesCount int32                            `json:"related_observables_count"`
}

type _IdentityOutput IdentityOutput

// NewIdentityOutput instantiates a new IdentityOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityOutput(name string, id string, tags map[string]TagRelationshipOutput, rootType string, relatedObservablesCount int32) *IdentityOutput {
	this := IdentityOutput{}
	var type_ string = "identity"
	this.Type = &type_
	this.Name = name
	var description string = ""
	this.Description = &description
	var identityClass string = ""
	this.IdentityClass = &identityClass
	var contactInformation string = ""
	this.ContactInformation = &contactInformation
	this.Id = id
	this.Tags = tags
	this.RootType = rootType
	this.RelatedObservablesCount = relatedObservablesCount
	return &this
}

// NewIdentityOutputWithDefaults instantiates a new IdentityOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityOutputWithDefaults() *IdentityOutput {
	this := IdentityOutput{}
	var type_ string = "identity"
	this.Type = &type_
	var description string = ""
	this.Description = &description
	var identityClass string = ""
	this.IdentityClass = &identityClass
	var contactInformation string = ""
	this.ContactInformation = &contactInformation
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdentityOutput) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdentityOutput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IdentityOutput) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value
func (o *IdentityOutput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IdentityOutput) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IdentityOutput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IdentityOutput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IdentityOutput) SetDescription(v string) {
	o.Description = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *IdentityOutput) GetContext() []map[string]interface{} {
	if o == nil || IsNil(o.Context) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetContextOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *IdentityOutput) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given []map[string]interface{} and assigns it to the Context field.
func (o *IdentityOutput) SetContext(v []map[string]interface{}) {
	o.Context = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *IdentityOutput) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *IdentityOutput) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *IdentityOutput) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *IdentityOutput) GetModified() time.Time {
	if o == nil || IsNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *IdentityOutput) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *IdentityOutput) SetModified(v time.Time) {
	o.Modified = &v
}

// GetIdentityClass returns the IdentityClass field value if set, zero value otherwise.
func (o *IdentityOutput) GetIdentityClass() string {
	if o == nil || IsNil(o.IdentityClass) {
		var ret string
		return ret
	}
	return *o.IdentityClass
}

// GetIdentityClassOk returns a tuple with the IdentityClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetIdentityClassOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityClass) {
		return nil, false
	}
	return o.IdentityClass, true
}

// HasIdentityClass returns a boolean if a field has been set.
func (o *IdentityOutput) HasIdentityClass() bool {
	if o != nil && !IsNil(o.IdentityClass) {
		return true
	}

	return false
}

// SetIdentityClass gets a reference to the given string and assigns it to the IdentityClass field.
func (o *IdentityOutput) SetIdentityClass(v string) {
	o.IdentityClass = &v
}

// GetSectors returns the Sectors field value if set, zero value otherwise.
func (o *IdentityOutput) GetSectors() []string {
	if o == nil || IsNil(o.Sectors) {
		var ret []string
		return ret
	}
	return o.Sectors
}

// GetSectorsOk returns a tuple with the Sectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetSectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Sectors) {
		return nil, false
	}
	return o.Sectors, true
}

// HasSectors returns a boolean if a field has been set.
func (o *IdentityOutput) HasSectors() bool {
	if o != nil && !IsNil(o.Sectors) {
		return true
	}

	return false
}

// SetSectors gets a reference to the given []string and assigns it to the Sectors field.
func (o *IdentityOutput) SetSectors(v []string) {
	o.Sectors = v
}

// GetContactInformation returns the ContactInformation field value if set, zero value otherwise.
func (o *IdentityOutput) GetContactInformation() string {
	if o == nil || IsNil(o.ContactInformation) {
		var ret string
		return ret
	}
	return *o.ContactInformation
}

// GetContactInformationOk returns a tuple with the ContactInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetContactInformationOk() (*string, bool) {
	if o == nil || IsNil(o.ContactInformation) {
		return nil, false
	}
	return o.ContactInformation, true
}

// HasContactInformation returns a boolean if a field has been set.
func (o *IdentityOutput) HasContactInformation() bool {
	if o != nil && !IsNil(o.ContactInformation) {
		return true
	}

	return false
}

// SetContactInformation gets a reference to the given string and assigns it to the ContactInformation field.
func (o *IdentityOutput) SetContactInformation(v string) {
	o.ContactInformation = &v
}

// GetId returns the Id field value
func (o *IdentityOutput) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IdentityOutput) SetId(v string) {
	o.Id = v
}

// GetTags returns the Tags field value
func (o *IdentityOutput) GetTags() map[string]TagRelationshipOutput {
	if o == nil {
		var ret map[string]TagRelationshipOutput
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetTagsOk() (map[string]TagRelationshipOutput, bool) {
	if o == nil {
		return map[string]TagRelationshipOutput{}, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *IdentityOutput) SetTags(v map[string]TagRelationshipOutput) {
	o.Tags = v
}

// GetRootType returns the RootType field value
func (o *IdentityOutput) GetRootType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootType
}

// GetRootTypeOk returns a tuple with the RootType field value
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetRootTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootType, true
}

// SetRootType sets field value
func (o *IdentityOutput) SetRootType(v string) {
	o.RootType = v
}

// GetRelatedObservablesCount returns the RelatedObservablesCount field value
func (o *IdentityOutput) GetRelatedObservablesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RelatedObservablesCount
}

// GetRelatedObservablesCountOk returns a tuple with the RelatedObservablesCount field value
// and a boolean to check if the value has been set.
func (o *IdentityOutput) GetRelatedObservablesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedObservablesCount, true
}

// SetRelatedObservablesCount sets field value
func (o *IdentityOutput) SetRelatedObservablesCount(v int32) {
	o.RelatedObservablesCount = v
}

func (o IdentityOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.IdentityClass) {
		toSerialize["identity_class"] = o.IdentityClass
	}
	if !IsNil(o.Sectors) {
		toSerialize["sectors"] = o.Sectors
	}
	if !IsNil(o.ContactInformation) {
		toSerialize["contact_information"] = o.ContactInformation
	}
	toSerialize["id"] = o.Id
	toSerialize["tags"] = o.Tags
	toSerialize["root_type"] = o.RootType
	toSerialize["related_observables_count"] = o.RelatedObservablesCount
	return toSerialize, nil
}

func (o *IdentityOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
		"tags",
		"root_type",
		"related_observables_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityOutput := _IdentityOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentityOutput)

	if err != nil {
		return err
	}

	*o = IdentityOutput(varIdentityOutput)

	return err
}

type NullableIdentityOutput struct {
	value *IdentityOutput
	isSet bool
}

func (v NullableIdentityOutput) Get() *IdentityOutput {
	return v.value
}

func (v *NullableIdentityOutput) Set(val *IdentityOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityOutput(val *IdentityOutput) *NullableIdentityOutput {
	return &NullableIdentityOutput{value: val, isSet: true}
}

func (v NullableIdentityOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
