/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// IndicatorType the model 'IndicatorType'
type IndicatorType string

// List of IndicatorType
const (
	QUERY            IndicatorType = "query"
	SIGMA            IndicatorType = "sigma"
	REGEX            IndicatorType = "regex"
	FORENSICARTIFACT IndicatorType = "forensicartifact"
	SURICATA         IndicatorType = "suricata"
	YARA             IndicatorType = "yara"
)

// All allowed values of IndicatorType enum
var AllowedIndicatorTypeEnumValues = []IndicatorType{
	"query",
	"sigma",
	"regex",
	"forensicartifact",
	"suricata",
	"yara",
}

func (v *IndicatorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndicatorType(value)
	for _, existing := range AllowedIndicatorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndicatorType", value)
}

// NewIndicatorTypeFromValue returns a pointer to a valid IndicatorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndicatorTypeFromValue(v string) (*IndicatorType, error) {
	ev := IndicatorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndicatorType: valid values are %v", v, AllowedIndicatorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndicatorType) IsValid() bool {
	for _, existing := range AllowedIndicatorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndicatorType value
func (v IndicatorType) Ptr() *IndicatorType {
	return &v
}

type NullableIndicatorType struct {
	value *IndicatorType
	isSet bool
}

func (v NullableIndicatorType) Get() *IndicatorType {
	return v.value
}

func (v *NullableIndicatorType) Set(val *IndicatorType) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorType) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorType(val *IndicatorType) *NullableIndicatorType {
	return &NullableIndicatorType{value: val, isSet: true}
}

func (v NullableIndicatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
