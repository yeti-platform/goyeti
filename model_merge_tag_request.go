/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the MergeTagRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeTagRequest{}

// MergeTagRequest struct for MergeTagRequest
type MergeTagRequest struct {
	Merge                []string `json:"merge"`
	MergeInto            string   `json:"merge_into"`
	Permanent            *bool    `json:"permanent,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MergeTagRequest MergeTagRequest

// NewMergeTagRequest instantiates a new MergeTagRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeTagRequest(merge []string, mergeInto string) *MergeTagRequest {
	this := MergeTagRequest{}
	this.Merge = merge
	this.MergeInto = mergeInto
	var permanent bool = false
	this.Permanent = &permanent
	return &this
}

// NewMergeTagRequestWithDefaults instantiates a new MergeTagRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeTagRequestWithDefaults() *MergeTagRequest {
	this := MergeTagRequest{}
	var permanent bool = false
	this.Permanent = &permanent
	return &this
}

// GetMerge returns the Merge field value
func (o *MergeTagRequest) GetMerge() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Merge
}

// GetMergeOk returns a tuple with the Merge field value
// and a boolean to check if the value has been set.
func (o *MergeTagRequest) GetMergeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Merge, true
}

// SetMerge sets field value
func (o *MergeTagRequest) SetMerge(v []string) {
	o.Merge = v
}

// GetMergeInto returns the MergeInto field value
func (o *MergeTagRequest) GetMergeInto() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MergeInto
}

// GetMergeIntoOk returns a tuple with the MergeInto field value
// and a boolean to check if the value has been set.
func (o *MergeTagRequest) GetMergeIntoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergeInto, true
}

// SetMergeInto sets field value
func (o *MergeTagRequest) SetMergeInto(v string) {
	o.MergeInto = v
}

// GetPermanent returns the Permanent field value if set, zero value otherwise.
func (o *MergeTagRequest) GetPermanent() bool {
	if o == nil || IsNil(o.Permanent) {
		var ret bool
		return ret
	}
	return *o.Permanent
}

// GetPermanentOk returns a tuple with the Permanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeTagRequest) GetPermanentOk() (*bool, bool) {
	if o == nil || IsNil(o.Permanent) {
		return nil, false
	}
	return o.Permanent, true
}

// HasPermanent returns a boolean if a field has been set.
func (o *MergeTagRequest) HasPermanent() bool {
	if o != nil && !IsNil(o.Permanent) {
		return true
	}

	return false
}

// SetPermanent gets a reference to the given bool and assigns it to the Permanent field.
func (o *MergeTagRequest) SetPermanent(v bool) {
	o.Permanent = &v
}

func (o MergeTagRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeTagRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merge"] = o.Merge
	toSerialize["merge_into"] = o.MergeInto
	if !IsNil(o.Permanent) {
		toSerialize["permanent"] = o.Permanent
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MergeTagRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merge",
		"merge_into",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMergeTagRequest := _MergeTagRequest{}

	err = json.Unmarshal(data, &varMergeTagRequest)

	if err != nil {
		return err
	}

	*o = MergeTagRequest(varMergeTagRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merge")
		delete(additionalProperties, "merge_into")
		delete(additionalProperties, "permanent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMergeTagRequest struct {
	value *MergeTagRequest
	isSet bool
}

func (v NullableMergeTagRequest) Get() *MergeTagRequest {
	return v.value
}

func (v *NullableMergeTagRequest) Set(val *MergeTagRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeTagRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeTagRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeTagRequest(val *MergeTagRequest) *NullableMergeTagRequest {
	return &NullableMergeTagRequest{value: val, isSet: true}
}

func (v NullableMergeTagRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeTagRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
