/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the MergeTagResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeTagResult{}

// MergeTagResult struct for MergeTagResult
type MergeTagResult struct {
	Merged               int32 `json:"merged"`
	Into                 Tag   `json:"into"`
	AdditionalProperties map[string]interface{}
}

type _MergeTagResult MergeTagResult

// NewMergeTagResult instantiates a new MergeTagResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeTagResult(merged int32, into Tag) *MergeTagResult {
	this := MergeTagResult{}
	this.Merged = merged
	this.Into = into
	return &this
}

// NewMergeTagResultWithDefaults instantiates a new MergeTagResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeTagResultWithDefaults() *MergeTagResult {
	this := MergeTagResult{}
	return &this
}

// GetMerged returns the Merged field value
func (o *MergeTagResult) GetMerged() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Merged
}

// GetMergedOk returns a tuple with the Merged field value
// and a boolean to check if the value has been set.
func (o *MergeTagResult) GetMergedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merged, true
}

// SetMerged sets field value
func (o *MergeTagResult) SetMerged(v int32) {
	o.Merged = v
}

// GetInto returns the Into field value
func (o *MergeTagResult) GetInto() Tag {
	if o == nil {
		var ret Tag
		return ret
	}

	return o.Into
}

// GetIntoOk returns a tuple with the Into field value
// and a boolean to check if the value has been set.
func (o *MergeTagResult) GetIntoOk() (*Tag, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Into, true
}

// SetInto sets field value
func (o *MergeTagResult) SetInto(v Tag) {
	o.Into = v
}

func (o MergeTagResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeTagResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merged"] = o.Merged
	toSerialize["into"] = o.Into

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MergeTagResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merged",
		"into",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMergeTagResult := _MergeTagResult{}

	err = json.Unmarshal(data, &varMergeTagResult)

	if err != nil {
		return err
	}

	*o = MergeTagResult(varMergeTagResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merged")
		delete(additionalProperties, "into")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMergeTagResult struct {
	value *MergeTagResult
	isSet bool
}

func (v NullableMergeTagResult) Get() *MergeTagResult {
	return v.value
}

func (v *NullableMergeTagResult) Set(val *MergeTagResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeTagResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeTagResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeTagResult(val *MergeTagResult) *NullableMergeTagResult {
	return &NullableMergeTagResult{value: val, isSet: true}
}

func (v NullableMergeTagResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeTagResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
