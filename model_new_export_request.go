/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the NewExportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewExportRequest{}

// NewExportRequest struct for NewExportRequest
type NewExportRequest struct {
	Export               ExportTaskInput `json:"export"`
	AdditionalProperties map[string]interface{}
}

type _NewExportRequest NewExportRequest

// NewNewExportRequest instantiates a new NewExportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewExportRequest(export ExportTaskInput) *NewExportRequest {
	this := NewExportRequest{}
	this.Export = export
	return &this
}

// NewNewExportRequestWithDefaults instantiates a new NewExportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewExportRequestWithDefaults() *NewExportRequest {
	this := NewExportRequest{}
	return &this
}

// GetExport returns the Export field value
func (o *NewExportRequest) GetExport() ExportTaskInput {
	if o == nil {
		var ret ExportTaskInput
		return ret
	}

	return o.Export
}

// GetExportOk returns a tuple with the Export field value
// and a boolean to check if the value has been set.
func (o *NewExportRequest) GetExportOk() (*ExportTaskInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Export, true
}

// SetExport sets field value
func (o *NewExportRequest) SetExport(v ExportTaskInput) {
	o.Export = v
}

func (o NewExportRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewExportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["export"] = o.Export

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NewExportRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"export",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewExportRequest := _NewExportRequest{}

	err = json.Unmarshal(data, &varNewExportRequest)

	if err != nil {
		return err
	}

	*o = NewExportRequest(varNewExportRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "export")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNewExportRequest struct {
	value *NewExportRequest
	isSet bool
}

func (v NullableNewExportRequest) Get() *NewExportRequest {
	return v.value
}

func (v *NullableNewExportRequest) Set(val *NewExportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNewExportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNewExportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewExportRequest(val *NewExportRequest) *NullableNewExportRequest {
	return &NullableNewExportRequest{value: val, isSet: true}
}

func (v NullableNewExportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewExportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
