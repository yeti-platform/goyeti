/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the NewObservableRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewObservableRequest{}

// NewObservableRequest struct for NewObservableRequest
type NewObservableRequest struct {
	Tags                 []string            `json:"tags,omitempty"`
	Value                string              `json:"value"`
	Type                 ObservableTypeInput `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _NewObservableRequest NewObservableRequest

// NewNewObservableRequest instantiates a new NewObservableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewObservableRequest(value string, type_ ObservableTypeInput) *NewObservableRequest {
	this := NewObservableRequest{}
	this.Value = value
	this.Type = type_
	return &this
}

// NewNewObservableRequestWithDefaults instantiates a new NewObservableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewObservableRequestWithDefaults() *NewObservableRequest {
	this := NewObservableRequest{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *NewObservableRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewObservableRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NewObservableRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *NewObservableRequest) SetTags(v []string) {
	o.Tags = v
}

// GetValue returns the Value field value
func (o *NewObservableRequest) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *NewObservableRequest) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *NewObservableRequest) SetValue(v string) {
	o.Value = v
}

// GetType returns the Type field value
func (o *NewObservableRequest) GetType() ObservableTypeInput {
	if o == nil {
		var ret ObservableTypeInput
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NewObservableRequest) GetTypeOk() (*ObservableTypeInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NewObservableRequest) SetType(v ObservableTypeInput) {
	o.Type = v
}

func (o NewObservableRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewObservableRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["value"] = o.Value
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NewObservableRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewObservableRequest := _NewObservableRequest{}

	err = json.Unmarshal(data, &varNewObservableRequest)

	if err != nil {
		return err
	}

	*o = NewObservableRequest(varNewObservableRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "value")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNewObservableRequest struct {
	value *NewObservableRequest
	isSet bool
}

func (v NullableNewObservableRequest) Get() *NewObservableRequest {
	return v.value
}

func (v *NullableNewObservableRequest) Set(val *NewObservableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNewObservableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNewObservableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewObservableRequest(val *NewObservableRequest) *NullableNewObservableRequest {
	return &NullableNewObservableRequest{value: val, isSet: true}
}

func (v NullableNewObservableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewObservableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
