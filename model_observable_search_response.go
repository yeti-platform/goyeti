/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the ObservableSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservableSearchResponse{}

// ObservableSearchResponse struct for ObservableSearchResponse
type ObservableSearchResponse struct {
	Observables          []AddedInner `json:"observables"`
	Total                int32        `json:"total"`
	AdditionalProperties map[string]interface{}
}

type _ObservableSearchResponse ObservableSearchResponse

// NewObservableSearchResponse instantiates a new ObservableSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservableSearchResponse(observables []AddedInner, total int32) *ObservableSearchResponse {
	this := ObservableSearchResponse{}
	this.Observables = observables
	this.Total = total
	return &this
}

// NewObservableSearchResponseWithDefaults instantiates a new ObservableSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservableSearchResponseWithDefaults() *ObservableSearchResponse {
	this := ObservableSearchResponse{}
	return &this
}

// GetObservables returns the Observables field value
func (o *ObservableSearchResponse) GetObservables() []AddedInner {
	if o == nil {
		var ret []AddedInner
		return ret
	}

	return o.Observables
}

// GetObservablesOk returns a tuple with the Observables field value
// and a boolean to check if the value has been set.
func (o *ObservableSearchResponse) GetObservablesOk() ([]AddedInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Observables, true
}

// SetObservables sets field value
func (o *ObservableSearchResponse) SetObservables(v []AddedInner) {
	o.Observables = v
}

// GetTotal returns the Total field value
func (o *ObservableSearchResponse) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ObservableSearchResponse) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ObservableSearchResponse) SetTotal(v int32) {
	o.Total = v
}

func (o ObservableSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservableSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["observables"] = o.Observables
	toSerialize["total"] = o.Total

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObservableSearchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"observables",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservableSearchResponse := _ObservableSearchResponse{}

	err = json.Unmarshal(data, &varObservableSearchResponse)

	if err != nil {
		return err
	}

	*o = ObservableSearchResponse(varObservableSearchResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "observables")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObservableSearchResponse struct {
	value *ObservableSearchResponse
	isSet bool
}

func (v NullableObservableSearchResponse) Get() *ObservableSearchResponse {
	return v.value
}

func (v *NullableObservableSearchResponse) Set(val *ObservableSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableObservableSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableObservableSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservableSearchResponse(val *ObservableSearchResponse) *NullableObservableSearchResponse {
	return &NullableObservableSearchResponse{value: val, isSet: true}
}

func (v NullableObservableSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservableSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
