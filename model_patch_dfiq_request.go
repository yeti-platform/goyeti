/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the PatchDFIQRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchDFIQRequest{}

// PatchDFIQRequest struct for PatchDFIQRequest
type PatchDFIQRequest struct {
	DfiqYaml             string   `json:"dfiq_yaml"`
	DfiqType             DFIQType `json:"dfiq_type"`
	UpdateIndicators     *bool    `json:"update_indicators,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchDFIQRequest PatchDFIQRequest

// NewPatchDFIQRequest instantiates a new PatchDFIQRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchDFIQRequest(dfiqYaml string, dfiqType DFIQType) *PatchDFIQRequest {
	this := PatchDFIQRequest{}
	this.DfiqYaml = dfiqYaml
	this.DfiqType = dfiqType
	var updateIndicators bool = false
	this.UpdateIndicators = &updateIndicators
	return &this
}

// NewPatchDFIQRequestWithDefaults instantiates a new PatchDFIQRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchDFIQRequestWithDefaults() *PatchDFIQRequest {
	this := PatchDFIQRequest{}
	var updateIndicators bool = false
	this.UpdateIndicators = &updateIndicators
	return &this
}

// GetDfiqYaml returns the DfiqYaml field value
func (o *PatchDFIQRequest) GetDfiqYaml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DfiqYaml
}

// GetDfiqYamlOk returns a tuple with the DfiqYaml field value
// and a boolean to check if the value has been set.
func (o *PatchDFIQRequest) GetDfiqYamlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfiqYaml, true
}

// SetDfiqYaml sets field value
func (o *PatchDFIQRequest) SetDfiqYaml(v string) {
	o.DfiqYaml = v
}

// GetDfiqType returns the DfiqType field value
func (o *PatchDFIQRequest) GetDfiqType() DFIQType {
	if o == nil {
		var ret DFIQType
		return ret
	}

	return o.DfiqType
}

// GetDfiqTypeOk returns a tuple with the DfiqType field value
// and a boolean to check if the value has been set.
func (o *PatchDFIQRequest) GetDfiqTypeOk() (*DFIQType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfiqType, true
}

// SetDfiqType sets field value
func (o *PatchDFIQRequest) SetDfiqType(v DFIQType) {
	o.DfiqType = v
}

// GetUpdateIndicators returns the UpdateIndicators field value if set, zero value otherwise.
func (o *PatchDFIQRequest) GetUpdateIndicators() bool {
	if o == nil || IsNil(o.UpdateIndicators) {
		var ret bool
		return ret
	}
	return *o.UpdateIndicators
}

// GetUpdateIndicatorsOk returns a tuple with the UpdateIndicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchDFIQRequest) GetUpdateIndicatorsOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateIndicators) {
		return nil, false
	}
	return o.UpdateIndicators, true
}

// HasUpdateIndicators returns a boolean if a field has been set.
func (o *PatchDFIQRequest) HasUpdateIndicators() bool {
	if o != nil && !IsNil(o.UpdateIndicators) {
		return true
	}

	return false
}

// SetUpdateIndicators gets a reference to the given bool and assigns it to the UpdateIndicators field.
func (o *PatchDFIQRequest) SetUpdateIndicators(v bool) {
	o.UpdateIndicators = &v
}

func (o PatchDFIQRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchDFIQRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfiq_yaml"] = o.DfiqYaml
	toSerialize["dfiq_type"] = o.DfiqType
	if !IsNil(o.UpdateIndicators) {
		toSerialize["update_indicators"] = o.UpdateIndicators
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchDFIQRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfiq_yaml",
		"dfiq_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchDFIQRequest := _PatchDFIQRequest{}

	err = json.Unmarshal(data, &varPatchDFIQRequest)

	if err != nil {
		return err
	}

	*o = PatchDFIQRequest(varPatchDFIQRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dfiq_yaml")
		delete(additionalProperties, "dfiq_type")
		delete(additionalProperties, "update_indicators")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchDFIQRequest struct {
	value *PatchDFIQRequest
	isSet bool
}

func (v NullablePatchDFIQRequest) Get() *PatchDFIQRequest {
	return v.value
}

func (v *NullablePatchDFIQRequest) Set(val *PatchDFIQRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchDFIQRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchDFIQRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchDFIQRequest(val *PatchDFIQRequest) *NullablePatchDFIQRequest {
	return &NullablePatchDFIQRequest{value: val, isSet: true}
}

func (v NullablePatchDFIQRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchDFIQRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
