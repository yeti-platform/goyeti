/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// ResponseAddTextApiV2ObservablesAddTextPost struct for ResponseAddTextApiV2ObservablesAddTextPost
type ResponseAddTextApiV2ObservablesAddTextPost struct {
	ASNOutput         *ASNOutput
	BICOutput         *BICOutput
	CIDROutput        *CIDROutput
	CertificateOutput *CertificateOutput
	CommandLineOutput *CommandLineOutput
	DockerImageOutput *DockerImageOutput
	EmailOutput       *EmailOutput
	FileOutput        *FileOutput
	GenericOutput     *GenericOutput
	HostnameOutput    *HostnameOutput
	IBANOutput        *IBANOutput
	IPv4Output        *IPv4Output
	IPv6Output        *IPv6Output
	ImphashOutput     *ImphashOutput
	JA3Output         *JA3Output
	JARMOutput        *JARMOutput
	MD5Output         *MD5Output
	MacAddressOutput  *MacAddressOutput
	MutexOutput       *MutexOutput
	NamedPipeOutput   *NamedPipeOutput
	PackageOutput     *PackageOutput
	PathOutput        *PathOutput
	RegistryKeyOutput *RegistryKeyOutput
	SHA1Output        *SHA1Output
	SHA256Output      *SHA256Output
	SsdeepOutput      *SsdeepOutput
	TLSHOutput        *TLSHOutput
	UrlOutput         *UrlOutput
	UserAccountOutput *UserAccountOutput
	UserAgentOutput   *UserAgentOutput
	WalletOutput      *WalletOutput
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResponseAddTextApiV2ObservablesAddTextPost) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ASNOutput
	err = json.Unmarshal(data, &dst.ASNOutput)
	if err == nil {
		jsonASNOutput, _ := json.Marshal(dst.ASNOutput)
		if string(jsonASNOutput) == "{}" { // empty struct
			dst.ASNOutput = nil
		} else {
			return nil // data stored in dst.ASNOutput, return on the first match
		}
	} else {
		dst.ASNOutput = nil
	}

	// try to unmarshal JSON data into BICOutput
	err = json.Unmarshal(data, &dst.BICOutput)
	if err == nil {
		jsonBICOutput, _ := json.Marshal(dst.BICOutput)
		if string(jsonBICOutput) == "{}" { // empty struct
			dst.BICOutput = nil
		} else {
			return nil // data stored in dst.BICOutput, return on the first match
		}
	} else {
		dst.BICOutput = nil
	}

	// try to unmarshal JSON data into CIDROutput
	err = json.Unmarshal(data, &dst.CIDROutput)
	if err == nil {
		jsonCIDROutput, _ := json.Marshal(dst.CIDROutput)
		if string(jsonCIDROutput) == "{}" { // empty struct
			dst.CIDROutput = nil
		} else {
			return nil // data stored in dst.CIDROutput, return on the first match
		}
	} else {
		dst.CIDROutput = nil
	}

	// try to unmarshal JSON data into CertificateOutput
	err = json.Unmarshal(data, &dst.CertificateOutput)
	if err == nil {
		jsonCertificateOutput, _ := json.Marshal(dst.CertificateOutput)
		if string(jsonCertificateOutput) == "{}" { // empty struct
			dst.CertificateOutput = nil
		} else {
			return nil // data stored in dst.CertificateOutput, return on the first match
		}
	} else {
		dst.CertificateOutput = nil
	}

	// try to unmarshal JSON data into CommandLineOutput
	err = json.Unmarshal(data, &dst.CommandLineOutput)
	if err == nil {
		jsonCommandLineOutput, _ := json.Marshal(dst.CommandLineOutput)
		if string(jsonCommandLineOutput) == "{}" { // empty struct
			dst.CommandLineOutput = nil
		} else {
			return nil // data stored in dst.CommandLineOutput, return on the first match
		}
	} else {
		dst.CommandLineOutput = nil
	}

	// try to unmarshal JSON data into DockerImageOutput
	err = json.Unmarshal(data, &dst.DockerImageOutput)
	if err == nil {
		jsonDockerImageOutput, _ := json.Marshal(dst.DockerImageOutput)
		if string(jsonDockerImageOutput) == "{}" { // empty struct
			dst.DockerImageOutput = nil
		} else {
			return nil // data stored in dst.DockerImageOutput, return on the first match
		}
	} else {
		dst.DockerImageOutput = nil
	}

	// try to unmarshal JSON data into EmailOutput
	err = json.Unmarshal(data, &dst.EmailOutput)
	if err == nil {
		jsonEmailOutput, _ := json.Marshal(dst.EmailOutput)
		if string(jsonEmailOutput) == "{}" { // empty struct
			dst.EmailOutput = nil
		} else {
			return nil // data stored in dst.EmailOutput, return on the first match
		}
	} else {
		dst.EmailOutput = nil
	}

	// try to unmarshal JSON data into FileOutput
	err = json.Unmarshal(data, &dst.FileOutput)
	if err == nil {
		jsonFileOutput, _ := json.Marshal(dst.FileOutput)
		if string(jsonFileOutput) == "{}" { // empty struct
			dst.FileOutput = nil
		} else {
			return nil // data stored in dst.FileOutput, return on the first match
		}
	} else {
		dst.FileOutput = nil
	}

	// try to unmarshal JSON data into GenericOutput
	err = json.Unmarshal(data, &dst.GenericOutput)
	if err == nil {
		jsonGenericOutput, _ := json.Marshal(dst.GenericOutput)
		if string(jsonGenericOutput) == "{}" { // empty struct
			dst.GenericOutput = nil
		} else {
			return nil // data stored in dst.GenericOutput, return on the first match
		}
	} else {
		dst.GenericOutput = nil
	}

	// try to unmarshal JSON data into HostnameOutput
	err = json.Unmarshal(data, &dst.HostnameOutput)
	if err == nil {
		jsonHostnameOutput, _ := json.Marshal(dst.HostnameOutput)
		if string(jsonHostnameOutput) == "{}" { // empty struct
			dst.HostnameOutput = nil
		} else {
			return nil // data stored in dst.HostnameOutput, return on the first match
		}
	} else {
		dst.HostnameOutput = nil
	}

	// try to unmarshal JSON data into IBANOutput
	err = json.Unmarshal(data, &dst.IBANOutput)
	if err == nil {
		jsonIBANOutput, _ := json.Marshal(dst.IBANOutput)
		if string(jsonIBANOutput) == "{}" { // empty struct
			dst.IBANOutput = nil
		} else {
			return nil // data stored in dst.IBANOutput, return on the first match
		}
	} else {
		dst.IBANOutput = nil
	}

	// try to unmarshal JSON data into IPv4Output
	err = json.Unmarshal(data, &dst.IPv4Output)
	if err == nil {
		jsonIPv4Output, _ := json.Marshal(dst.IPv4Output)
		if string(jsonIPv4Output) == "{}" { // empty struct
			dst.IPv4Output = nil
		} else {
			return nil // data stored in dst.IPv4Output, return on the first match
		}
	} else {
		dst.IPv4Output = nil
	}

	// try to unmarshal JSON data into IPv6Output
	err = json.Unmarshal(data, &dst.IPv6Output)
	if err == nil {
		jsonIPv6Output, _ := json.Marshal(dst.IPv6Output)
		if string(jsonIPv6Output) == "{}" { // empty struct
			dst.IPv6Output = nil
		} else {
			return nil // data stored in dst.IPv6Output, return on the first match
		}
	} else {
		dst.IPv6Output = nil
	}

	// try to unmarshal JSON data into ImphashOutput
	err = json.Unmarshal(data, &dst.ImphashOutput)
	if err == nil {
		jsonImphashOutput, _ := json.Marshal(dst.ImphashOutput)
		if string(jsonImphashOutput) == "{}" { // empty struct
			dst.ImphashOutput = nil
		} else {
			return nil // data stored in dst.ImphashOutput, return on the first match
		}
	} else {
		dst.ImphashOutput = nil
	}

	// try to unmarshal JSON data into JA3Output
	err = json.Unmarshal(data, &dst.JA3Output)
	if err == nil {
		jsonJA3Output, _ := json.Marshal(dst.JA3Output)
		if string(jsonJA3Output) == "{}" { // empty struct
			dst.JA3Output = nil
		} else {
			return nil // data stored in dst.JA3Output, return on the first match
		}
	} else {
		dst.JA3Output = nil
	}

	// try to unmarshal JSON data into JARMOutput
	err = json.Unmarshal(data, &dst.JARMOutput)
	if err == nil {
		jsonJARMOutput, _ := json.Marshal(dst.JARMOutput)
		if string(jsonJARMOutput) == "{}" { // empty struct
			dst.JARMOutput = nil
		} else {
			return nil // data stored in dst.JARMOutput, return on the first match
		}
	} else {
		dst.JARMOutput = nil
	}

	// try to unmarshal JSON data into MD5Output
	err = json.Unmarshal(data, &dst.MD5Output)
	if err == nil {
		jsonMD5Output, _ := json.Marshal(dst.MD5Output)
		if string(jsonMD5Output) == "{}" { // empty struct
			dst.MD5Output = nil
		} else {
			return nil // data stored in dst.MD5Output, return on the first match
		}
	} else {
		dst.MD5Output = nil
	}

	// try to unmarshal JSON data into MacAddressOutput
	err = json.Unmarshal(data, &dst.MacAddressOutput)
	if err == nil {
		jsonMacAddressOutput, _ := json.Marshal(dst.MacAddressOutput)
		if string(jsonMacAddressOutput) == "{}" { // empty struct
			dst.MacAddressOutput = nil
		} else {
			return nil // data stored in dst.MacAddressOutput, return on the first match
		}
	} else {
		dst.MacAddressOutput = nil
	}

	// try to unmarshal JSON data into MutexOutput
	err = json.Unmarshal(data, &dst.MutexOutput)
	if err == nil {
		jsonMutexOutput, _ := json.Marshal(dst.MutexOutput)
		if string(jsonMutexOutput) == "{}" { // empty struct
			dst.MutexOutput = nil
		} else {
			return nil // data stored in dst.MutexOutput, return on the first match
		}
	} else {
		dst.MutexOutput = nil
	}

	// try to unmarshal JSON data into NamedPipeOutput
	err = json.Unmarshal(data, &dst.NamedPipeOutput)
	if err == nil {
		jsonNamedPipeOutput, _ := json.Marshal(dst.NamedPipeOutput)
		if string(jsonNamedPipeOutput) == "{}" { // empty struct
			dst.NamedPipeOutput = nil
		} else {
			return nil // data stored in dst.NamedPipeOutput, return on the first match
		}
	} else {
		dst.NamedPipeOutput = nil
	}

	// try to unmarshal JSON data into PackageOutput
	err = json.Unmarshal(data, &dst.PackageOutput)
	if err == nil {
		jsonPackageOutput, _ := json.Marshal(dst.PackageOutput)
		if string(jsonPackageOutput) == "{}" { // empty struct
			dst.PackageOutput = nil
		} else {
			return nil // data stored in dst.PackageOutput, return on the first match
		}
	} else {
		dst.PackageOutput = nil
	}

	// try to unmarshal JSON data into PathOutput
	err = json.Unmarshal(data, &dst.PathOutput)
	if err == nil {
		jsonPathOutput, _ := json.Marshal(dst.PathOutput)
		if string(jsonPathOutput) == "{}" { // empty struct
			dst.PathOutput = nil
		} else {
			return nil // data stored in dst.PathOutput, return on the first match
		}
	} else {
		dst.PathOutput = nil
	}

	// try to unmarshal JSON data into RegistryKeyOutput
	err = json.Unmarshal(data, &dst.RegistryKeyOutput)
	if err == nil {
		jsonRegistryKeyOutput, _ := json.Marshal(dst.RegistryKeyOutput)
		if string(jsonRegistryKeyOutput) == "{}" { // empty struct
			dst.RegistryKeyOutput = nil
		} else {
			return nil // data stored in dst.RegistryKeyOutput, return on the first match
		}
	} else {
		dst.RegistryKeyOutput = nil
	}

	// try to unmarshal JSON data into SHA1Output
	err = json.Unmarshal(data, &dst.SHA1Output)
	if err == nil {
		jsonSHA1Output, _ := json.Marshal(dst.SHA1Output)
		if string(jsonSHA1Output) == "{}" { // empty struct
			dst.SHA1Output = nil
		} else {
			return nil // data stored in dst.SHA1Output, return on the first match
		}
	} else {
		dst.SHA1Output = nil
	}

	// try to unmarshal JSON data into SHA256Output
	err = json.Unmarshal(data, &dst.SHA256Output)
	if err == nil {
		jsonSHA256Output, _ := json.Marshal(dst.SHA256Output)
		if string(jsonSHA256Output) == "{}" { // empty struct
			dst.SHA256Output = nil
		} else {
			return nil // data stored in dst.SHA256Output, return on the first match
		}
	} else {
		dst.SHA256Output = nil
	}

	// try to unmarshal JSON data into SsdeepOutput
	err = json.Unmarshal(data, &dst.SsdeepOutput)
	if err == nil {
		jsonSsdeepOutput, _ := json.Marshal(dst.SsdeepOutput)
		if string(jsonSsdeepOutput) == "{}" { // empty struct
			dst.SsdeepOutput = nil
		} else {
			return nil // data stored in dst.SsdeepOutput, return on the first match
		}
	} else {
		dst.SsdeepOutput = nil
	}

	// try to unmarshal JSON data into TLSHOutput
	err = json.Unmarshal(data, &dst.TLSHOutput)
	if err == nil {
		jsonTLSHOutput, _ := json.Marshal(dst.TLSHOutput)
		if string(jsonTLSHOutput) == "{}" { // empty struct
			dst.TLSHOutput = nil
		} else {
			return nil // data stored in dst.TLSHOutput, return on the first match
		}
	} else {
		dst.TLSHOutput = nil
	}

	// try to unmarshal JSON data into UrlOutput
	err = json.Unmarshal(data, &dst.UrlOutput)
	if err == nil {
		jsonUrlOutput, _ := json.Marshal(dst.UrlOutput)
		if string(jsonUrlOutput) == "{}" { // empty struct
			dst.UrlOutput = nil
		} else {
			return nil // data stored in dst.UrlOutput, return on the first match
		}
	} else {
		dst.UrlOutput = nil
	}

	// try to unmarshal JSON data into UserAccountOutput
	err = json.Unmarshal(data, &dst.UserAccountOutput)
	if err == nil {
		jsonUserAccountOutput, _ := json.Marshal(dst.UserAccountOutput)
		if string(jsonUserAccountOutput) == "{}" { // empty struct
			dst.UserAccountOutput = nil
		} else {
			return nil // data stored in dst.UserAccountOutput, return on the first match
		}
	} else {
		dst.UserAccountOutput = nil
	}

	// try to unmarshal JSON data into UserAgentOutput
	err = json.Unmarshal(data, &dst.UserAgentOutput)
	if err == nil {
		jsonUserAgentOutput, _ := json.Marshal(dst.UserAgentOutput)
		if string(jsonUserAgentOutput) == "{}" { // empty struct
			dst.UserAgentOutput = nil
		} else {
			return nil // data stored in dst.UserAgentOutput, return on the first match
		}
	} else {
		dst.UserAgentOutput = nil
	}

	// try to unmarshal JSON data into WalletOutput
	err = json.Unmarshal(data, &dst.WalletOutput)
	if err == nil {
		jsonWalletOutput, _ := json.Marshal(dst.WalletOutput)
		if string(jsonWalletOutput) == "{}" { // empty struct
			dst.WalletOutput = nil
		} else {
			return nil // data stored in dst.WalletOutput, return on the first match
		}
	} else {
		dst.WalletOutput = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ResponseAddTextApiV2ObservablesAddTextPost)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseAddTextApiV2ObservablesAddTextPost) MarshalJSON() ([]byte, error) {
	if src.ASNOutput != nil {
		return json.Marshal(&src.ASNOutput)
	}

	if src.BICOutput != nil {
		return json.Marshal(&src.BICOutput)
	}

	if src.CIDROutput != nil {
		return json.Marshal(&src.CIDROutput)
	}

	if src.CertificateOutput != nil {
		return json.Marshal(&src.CertificateOutput)
	}

	if src.CommandLineOutput != nil {
		return json.Marshal(&src.CommandLineOutput)
	}

	if src.DockerImageOutput != nil {
		return json.Marshal(&src.DockerImageOutput)
	}

	if src.EmailOutput != nil {
		return json.Marshal(&src.EmailOutput)
	}

	if src.FileOutput != nil {
		return json.Marshal(&src.FileOutput)
	}

	if src.GenericOutput != nil {
		return json.Marshal(&src.GenericOutput)
	}

	if src.HostnameOutput != nil {
		return json.Marshal(&src.HostnameOutput)
	}

	if src.IBANOutput != nil {
		return json.Marshal(&src.IBANOutput)
	}

	if src.IPv4Output != nil {
		return json.Marshal(&src.IPv4Output)
	}

	if src.IPv6Output != nil {
		return json.Marshal(&src.IPv6Output)
	}

	if src.ImphashOutput != nil {
		return json.Marshal(&src.ImphashOutput)
	}

	if src.JA3Output != nil {
		return json.Marshal(&src.JA3Output)
	}

	if src.JARMOutput != nil {
		return json.Marshal(&src.JARMOutput)
	}

	if src.MD5Output != nil {
		return json.Marshal(&src.MD5Output)
	}

	if src.MacAddressOutput != nil {
		return json.Marshal(&src.MacAddressOutput)
	}

	if src.MutexOutput != nil {
		return json.Marshal(&src.MutexOutput)
	}

	if src.NamedPipeOutput != nil {
		return json.Marshal(&src.NamedPipeOutput)
	}

	if src.PackageOutput != nil {
		return json.Marshal(&src.PackageOutput)
	}

	if src.PathOutput != nil {
		return json.Marshal(&src.PathOutput)
	}

	if src.RegistryKeyOutput != nil {
		return json.Marshal(&src.RegistryKeyOutput)
	}

	if src.SHA1Output != nil {
		return json.Marshal(&src.SHA1Output)
	}

	if src.SHA256Output != nil {
		return json.Marshal(&src.SHA256Output)
	}

	if src.SsdeepOutput != nil {
		return json.Marshal(&src.SsdeepOutput)
	}

	if src.TLSHOutput != nil {
		return json.Marshal(&src.TLSHOutput)
	}

	if src.UrlOutput != nil {
		return json.Marshal(&src.UrlOutput)
	}

	if src.UserAccountOutput != nil {
		return json.Marshal(&src.UserAccountOutput)
	}

	if src.UserAgentOutput != nil {
		return json.Marshal(&src.UserAgentOutput)
	}

	if src.WalletOutput != nil {
		return json.Marshal(&src.WalletOutput)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableResponseAddTextApiV2ObservablesAddTextPost struct {
	value *ResponseAddTextApiV2ObservablesAddTextPost
	isSet bool
}

func (v NullableResponseAddTextApiV2ObservablesAddTextPost) Get() *ResponseAddTextApiV2ObservablesAddTextPost {
	return v.value
}

func (v *NullableResponseAddTextApiV2ObservablesAddTextPost) Set(val *ResponseAddTextApiV2ObservablesAddTextPost) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseAddTextApiV2ObservablesAddTextPost) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseAddTextApiV2ObservablesAddTextPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseAddTextApiV2ObservablesAddTextPost(val *ResponseAddTextApiV2ObservablesAddTextPost) *NullableResponseAddTextApiV2ObservablesAddTextPost {
	return &NullableResponseAddTextApiV2ObservablesAddTextPost{value: val, isSet: true}
}

func (v NullableResponseAddTextApiV2ObservablesAddTextPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseAddTextApiV2ObservablesAddTextPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
