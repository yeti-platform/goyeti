/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ResponseNewFromYamlApiV2DfiqFromYamlPost - struct for ResponseNewFromYamlApiV2DfiqFromYamlPost
type ResponseNewFromYamlApiV2DfiqFromYamlPost struct {
	DFIQFacet    *DFIQFacet
	DFIQQuestion *DFIQQuestion
	DFIQScenario *DFIQScenario
}

// DFIQFacetAsResponseNewFromYamlApiV2DfiqFromYamlPost is a convenience function that returns DFIQFacet wrapped in ResponseNewFromYamlApiV2DfiqFromYamlPost
func DFIQFacetAsResponseNewFromYamlApiV2DfiqFromYamlPost(v *DFIQFacet) ResponseNewFromYamlApiV2DfiqFromYamlPost {
	return ResponseNewFromYamlApiV2DfiqFromYamlPost{
		DFIQFacet: v,
	}
}

// DFIQQuestionAsResponseNewFromYamlApiV2DfiqFromYamlPost is a convenience function that returns DFIQQuestion wrapped in ResponseNewFromYamlApiV2DfiqFromYamlPost
func DFIQQuestionAsResponseNewFromYamlApiV2DfiqFromYamlPost(v *DFIQQuestion) ResponseNewFromYamlApiV2DfiqFromYamlPost {
	return ResponseNewFromYamlApiV2DfiqFromYamlPost{
		DFIQQuestion: v,
	}
}

// DFIQScenarioAsResponseNewFromYamlApiV2DfiqFromYamlPost is a convenience function that returns DFIQScenario wrapped in ResponseNewFromYamlApiV2DfiqFromYamlPost
func DFIQScenarioAsResponseNewFromYamlApiV2DfiqFromYamlPost(v *DFIQScenario) ResponseNewFromYamlApiV2DfiqFromYamlPost {
	return ResponseNewFromYamlApiV2DfiqFromYamlPost{
		DFIQScenario: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResponseNewFromYamlApiV2DfiqFromYamlPost) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DFIQFacet
	err = newStrictDecoder(data).Decode(&dst.DFIQFacet)
	if err == nil {
		jsonDFIQFacet, _ := json.Marshal(dst.DFIQFacet)
		if string(jsonDFIQFacet) == "{}" { // empty struct
			dst.DFIQFacet = nil
		} else {
			if err = validator.Validate(dst.DFIQFacet); err != nil {
				dst.DFIQFacet = nil
			} else {
				match++
			}
		}
	} else {
		dst.DFIQFacet = nil
	}

	// try to unmarshal data into DFIQQuestion
	err = newStrictDecoder(data).Decode(&dst.DFIQQuestion)
	if err == nil {
		jsonDFIQQuestion, _ := json.Marshal(dst.DFIQQuestion)
		if string(jsonDFIQQuestion) == "{}" { // empty struct
			dst.DFIQQuestion = nil
		} else {
			if err = validator.Validate(dst.DFIQQuestion); err != nil {
				dst.DFIQQuestion = nil
			} else {
				match++
			}
		}
	} else {
		dst.DFIQQuestion = nil
	}

	// try to unmarshal data into DFIQScenario
	err = newStrictDecoder(data).Decode(&dst.DFIQScenario)
	if err == nil {
		jsonDFIQScenario, _ := json.Marshal(dst.DFIQScenario)
		if string(jsonDFIQScenario) == "{}" { // empty struct
			dst.DFIQScenario = nil
		} else {
			if err = validator.Validate(dst.DFIQScenario); err != nil {
				dst.DFIQScenario = nil
			} else {
				match++
			}
		}
	} else {
		dst.DFIQScenario = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DFIQFacet = nil
		dst.DFIQQuestion = nil
		dst.DFIQScenario = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResponseNewFromYamlApiV2DfiqFromYamlPost)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResponseNewFromYamlApiV2DfiqFromYamlPost)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseNewFromYamlApiV2DfiqFromYamlPost) MarshalJSON() ([]byte, error) {
	if src.DFIQFacet != nil {
		return json.Marshal(&src.DFIQFacet)
	}

	if src.DFIQQuestion != nil {
		return json.Marshal(&src.DFIQQuestion)
	}

	if src.DFIQScenario != nil {
		return json.Marshal(&src.DFIQScenario)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResponseNewFromYamlApiV2DfiqFromYamlPost) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DFIQFacet != nil {
		return obj.DFIQFacet
	}

	if obj.DFIQQuestion != nil {
		return obj.DFIQQuestion
	}

	if obj.DFIQScenario != nil {
		return obj.DFIQScenario
	}

	// all schemas are nil
	return nil
}

type NullableResponseNewFromYamlApiV2DfiqFromYamlPost struct {
	value *ResponseNewFromYamlApiV2DfiqFromYamlPost
	isSet bool
}

func (v NullableResponseNewFromYamlApiV2DfiqFromYamlPost) Get() *ResponseNewFromYamlApiV2DfiqFromYamlPost {
	return v.value
}

func (v *NullableResponseNewFromYamlApiV2DfiqFromYamlPost) Set(val *ResponseNewFromYamlApiV2DfiqFromYamlPost) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseNewFromYamlApiV2DfiqFromYamlPost) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseNewFromYamlApiV2DfiqFromYamlPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseNewFromYamlApiV2DfiqFromYamlPost(val *ResponseNewFromYamlApiV2DfiqFromYamlPost) *NullableResponseNewFromYamlApiV2DfiqFromYamlPost {
	return &NullableResponseNewFromYamlApiV2DfiqFromYamlPost{value: val, isSet: true}
}

func (v NullableResponseNewFromYamlApiV2DfiqFromYamlPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseNewFromYamlApiV2DfiqFromYamlPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
