/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchUserRequest{}

// SearchUserRequest struct for SearchUserRequest
type SearchUserRequest struct {
	Username             string `json:"username"`
	Count                *int32 `json:"count,omitempty"`
	Page                 *int32 `json:"page,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchUserRequest SearchUserRequest

// NewSearchUserRequest instantiates a new SearchUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchUserRequest(username string) *SearchUserRequest {
	this := SearchUserRequest{}
	this.Username = username
	var count int32 = 50
	this.Count = &count
	var page int32 = 0
	this.Page = &page
	return &this
}

// NewSearchUserRequestWithDefaults instantiates a new SearchUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchUserRequestWithDefaults() *SearchUserRequest {
	this := SearchUserRequest{}
	var count int32 = 50
	this.Count = &count
	var page int32 = 0
	this.Page = &page
	return &this
}

// GetUsername returns the Username field value
func (o *SearchUserRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *SearchUserRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *SearchUserRequest) SetUsername(v string) {
	o.Username = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SearchUserRequest) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserRequest) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SearchUserRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *SearchUserRequest) SetCount(v int32) {
	o.Count = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *SearchUserRequest) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserRequest) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *SearchUserRequest) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *SearchUserRequest) SetPage(v int32) {
	o.Page = &v
}

func (o SearchUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchUserRequest := _SearchUserRequest{}

	err = json.Unmarshal(data, &varSearchUserRequest)

	if err != nil {
		return err
	}

	*o = SearchUserRequest(varSearchUserRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "count")
		delete(additionalProperties, "page")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchUserRequest struct {
	value *SearchUserRequest
	isSet bool
}

func (v NullableSearchUserRequest) Get() *SearchUserRequest {
	return v.value
}

func (v *NullableSearchUserRequest) Set(val *SearchUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchUserRequest(val *SearchUserRequest) *NullableSearchUserRequest {
	return &NullableSearchUserRequest{value: val, isSet: true}
}

func (v NullableSearchUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
