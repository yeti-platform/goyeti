/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// SeverityType the model 'SeverityType'
type SeverityType string

// List of SeverityType
const (
	NONE     SeverityType = "none"
	LOW      SeverityType = "low"
	MEDIUM   SeverityType = "medium"
	HIGH     SeverityType = "high"
	CRITICAL SeverityType = "critical"
)

// All allowed values of SeverityType enum
var AllowedSeverityTypeEnumValues = []SeverityType{
	"none",
	"low",
	"medium",
	"high",
	"critical",
}

func (v *SeverityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SeverityType(value)
	for _, existing := range AllowedSeverityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SeverityType", value)
}

// NewSeverityTypeFromValue returns a pointer to a valid SeverityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSeverityTypeFromValue(v string) (*SeverityType, error) {
	ev := SeverityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SeverityType: valid values are %v", v, AllowedSeverityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SeverityType) IsValid() bool {
	for _, existing := range AllowedSeverityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SeverityType value
func (v SeverityType) Ptr() *SeverityType {
	return &v
}

type NullableSeverityType struct {
	value *SeverityType
	isSet bool
}

func (v NullableSeverityType) Get() *SeverityType {
	return v.value
}

func (v *NullableSeverityType) Set(val *SeverityType) {
	v.value = val
	v.isSet = true
}

func (v NullableSeverityType) IsSet() bool {
	return v.isSet
}

func (v *NullableSeverityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeverityType(val *SeverityType) *NullableSeverityType {
	return &NullableSeverityType{value: val, isSet: true}
}

func (v NullableSeverityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeverityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
