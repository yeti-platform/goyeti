/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Tag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tag{}

// Tag struct for Tag
type Tag struct {
	Name              string     `json:"name"`
	Count             *int32     `json:"count,omitempty"`
	Created           *time.Time `json:"created,omitempty"`
	DefaultExpiration *string    `json:"default_expiration,omitempty"`
	Produces          []string   `json:"produces,omitempty"`
	Replaces          []string   `json:"replaces,omitempty"`
	Id                string     `json:"id"`
}

type _Tag Tag

// NewTag instantiates a new Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTag(name string, id string) *Tag {
	this := Tag{}
	this.Name = name
	var count int32 = 0
	this.Count = &count
	var defaultExpiration string = "P90D"
	this.DefaultExpiration = &defaultExpiration
	this.Id = id
	return &this
}

// NewTagWithDefaults instantiates a new Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithDefaults() *Tag {
	this := Tag{}
	var count int32 = 0
	this.Count = &count
	var defaultExpiration string = "P90D"
	this.DefaultExpiration = &defaultExpiration
	return &this
}

// GetName returns the Name field value
func (o *Tag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tag) SetName(v string) {
	o.Name = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *Tag) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *Tag) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *Tag) SetCount(v int32) {
	o.Count = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Tag) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Tag) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Tag) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDefaultExpiration returns the DefaultExpiration field value if set, zero value otherwise.
func (o *Tag) GetDefaultExpiration() string {
	if o == nil || IsNil(o.DefaultExpiration) {
		var ret string
		return ret
	}
	return *o.DefaultExpiration
}

// GetDefaultExpirationOk returns a tuple with the DefaultExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetDefaultExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultExpiration) {
		return nil, false
	}
	return o.DefaultExpiration, true
}

// HasDefaultExpiration returns a boolean if a field has been set.
func (o *Tag) HasDefaultExpiration() bool {
	if o != nil && !IsNil(o.DefaultExpiration) {
		return true
	}

	return false
}

// SetDefaultExpiration gets a reference to the given string and assigns it to the DefaultExpiration field.
func (o *Tag) SetDefaultExpiration(v string) {
	o.DefaultExpiration = &v
}

// GetProduces returns the Produces field value if set, zero value otherwise.
func (o *Tag) GetProduces() []string {
	if o == nil || IsNil(o.Produces) {
		var ret []string
		return ret
	}
	return o.Produces
}

// GetProducesOk returns a tuple with the Produces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetProducesOk() ([]string, bool) {
	if o == nil || IsNil(o.Produces) {
		return nil, false
	}
	return o.Produces, true
}

// HasProduces returns a boolean if a field has been set.
func (o *Tag) HasProduces() bool {
	if o != nil && !IsNil(o.Produces) {
		return true
	}

	return false
}

// SetProduces gets a reference to the given []string and assigns it to the Produces field.
func (o *Tag) SetProduces(v []string) {
	o.Produces = v
}

// GetReplaces returns the Replaces field value if set, zero value otherwise.
func (o *Tag) GetReplaces() []string {
	if o == nil || IsNil(o.Replaces) {
		var ret []string
		return ret
	}
	return o.Replaces
}

// GetReplacesOk returns a tuple with the Replaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetReplacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Replaces) {
		return nil, false
	}
	return o.Replaces, true
}

// HasReplaces returns a boolean if a field has been set.
func (o *Tag) HasReplaces() bool {
	if o != nil && !IsNil(o.Replaces) {
		return true
	}

	return false
}

// SetReplaces gets a reference to the given []string and assigns it to the Replaces field.
func (o *Tag) SetReplaces(v []string) {
	o.Replaces = v
}

// GetId returns the Id field value
func (o *Tag) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Tag) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Tag) SetId(v string) {
	o.Id = v
}

func (o Tag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.DefaultExpiration) {
		toSerialize["default_expiration"] = o.DefaultExpiration
	}
	if !IsNil(o.Produces) {
		toSerialize["produces"] = o.Produces
	}
	if !IsNil(o.Replaces) {
		toSerialize["replaces"] = o.Replaces
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *Tag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTag := _Tag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTag)

	if err != nil {
		return err
	}

	*o = Tag(varTag)

	return err
}

type NullableTag struct {
	value *Tag
	isSet bool
}

func (v NullableTag) Get() *Tag {
	return v.value
}

func (v *NullableTag) Set(val *Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTag(val *Tag) *NullableTag {
	return &NullableTag{value: val, isSet: true}
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
