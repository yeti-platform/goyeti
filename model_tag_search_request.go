/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the TagSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagSearchRequest{}

// TagSearchRequest struct for TagSearchRequest
type TagSearchRequest struct {
	Name                 *Name    `json:"name,omitempty"`
	Produces             []string `json:"produces,omitempty"`
	Replaces             []string `json:"replaces,omitempty"`
	Count                int32    `json:"count"`
	Page                 int32    `json:"page"`
	AdditionalProperties map[string]interface{}
}

type _TagSearchRequest TagSearchRequest

// NewTagSearchRequest instantiates a new TagSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagSearchRequest(count int32, page int32) *TagSearchRequest {
	this := TagSearchRequest{}
	this.Count = count
	this.Page = page
	return &this
}

// NewTagSearchRequestWithDefaults instantiates a new TagSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagSearchRequestWithDefaults() *TagSearchRequest {
	this := TagSearchRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TagSearchRequest) GetName() Name {
	if o == nil || IsNil(o.Name) {
		var ret Name
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagSearchRequest) GetNameOk() (*Name, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TagSearchRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given Name and assigns it to the Name field.
func (o *TagSearchRequest) SetName(v Name) {
	o.Name = &v
}

// GetProduces returns the Produces field value if set, zero value otherwise.
func (o *TagSearchRequest) GetProduces() []string {
	if o == nil || IsNil(o.Produces) {
		var ret []string
		return ret
	}
	return o.Produces
}

// GetProducesOk returns a tuple with the Produces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagSearchRequest) GetProducesOk() ([]string, bool) {
	if o == nil || IsNil(o.Produces) {
		return nil, false
	}
	return o.Produces, true
}

// HasProduces returns a boolean if a field has been set.
func (o *TagSearchRequest) HasProduces() bool {
	if o != nil && !IsNil(o.Produces) {
		return true
	}

	return false
}

// SetProduces gets a reference to the given []string and assigns it to the Produces field.
func (o *TagSearchRequest) SetProduces(v []string) {
	o.Produces = v
}

// GetReplaces returns the Replaces field value if set, zero value otherwise.
func (o *TagSearchRequest) GetReplaces() []string {
	if o == nil || IsNil(o.Replaces) {
		var ret []string
		return ret
	}
	return o.Replaces
}

// GetReplacesOk returns a tuple with the Replaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagSearchRequest) GetReplacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Replaces) {
		return nil, false
	}
	return o.Replaces, true
}

// HasReplaces returns a boolean if a field has been set.
func (o *TagSearchRequest) HasReplaces() bool {
	if o != nil && !IsNil(o.Replaces) {
		return true
	}

	return false
}

// SetReplaces gets a reference to the given []string and assigns it to the Replaces field.
func (o *TagSearchRequest) SetReplaces(v []string) {
	o.Replaces = v
}

// GetCount returns the Count field value
func (o *TagSearchRequest) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TagSearchRequest) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TagSearchRequest) SetCount(v int32) {
	o.Count = v
}

// GetPage returns the Page field value
func (o *TagSearchRequest) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *TagSearchRequest) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *TagSearchRequest) SetPage(v int32) {
	o.Page = v
}

func (o TagSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Produces) {
		toSerialize["produces"] = o.Produces
	}
	if !IsNil(o.Replaces) {
		toSerialize["replaces"] = o.Replaces
	}
	toSerialize["count"] = o.Count
	toSerialize["page"] = o.Page

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TagSearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"page",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagSearchRequest := _TagSearchRequest{}

	err = json.Unmarshal(data, &varTagSearchRequest)

	if err != nil {
		return err
	}

	*o = TagSearchRequest(varTagSearchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "produces")
		delete(additionalProperties, "replaces")
		delete(additionalProperties, "count")
		delete(additionalProperties, "page")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTagSearchRequest struct {
	value *TagSearchRequest
	isSet bool
}

func (v NullableTagSearchRequest) Get() *TagSearchRequest {
	return v.value
}

func (v *NullableTagSearchRequest) Set(val *TagSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTagSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTagSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagSearchRequest(val *TagSearchRequest) *NullableTagSearchRequest {
	return &NullableTagSearchRequest{value: val, isSet: true}
}

func (v NullableTagSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
