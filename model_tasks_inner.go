/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// TasksInner struct for TasksInner
type TasksInner struct {
	AnalyticsTask    *AnalyticsTask
	ExportTaskOutput *ExportTaskOutput
	FeedTask         *FeedTask
	OneShotTask      *OneShotTask
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TasksInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AnalyticsTask
	err = json.Unmarshal(data, &dst.AnalyticsTask)
	if err == nil {
		jsonAnalyticsTask, _ := json.Marshal(dst.AnalyticsTask)
		if string(jsonAnalyticsTask) == "{}" { // empty struct
			dst.AnalyticsTask = nil
		} else {
			return nil // data stored in dst.AnalyticsTask, return on the first match
		}
	} else {
		dst.AnalyticsTask = nil
	}

	// try to unmarshal JSON data into ExportTaskOutput
	err = json.Unmarshal(data, &dst.ExportTaskOutput)
	if err == nil {
		jsonExportTaskOutput, _ := json.Marshal(dst.ExportTaskOutput)
		if string(jsonExportTaskOutput) == "{}" { // empty struct
			dst.ExportTaskOutput = nil
		} else {
			return nil // data stored in dst.ExportTaskOutput, return on the first match
		}
	} else {
		dst.ExportTaskOutput = nil
	}

	// try to unmarshal JSON data into FeedTask
	err = json.Unmarshal(data, &dst.FeedTask)
	if err == nil {
		jsonFeedTask, _ := json.Marshal(dst.FeedTask)
		if string(jsonFeedTask) == "{}" { // empty struct
			dst.FeedTask = nil
		} else {
			return nil // data stored in dst.FeedTask, return on the first match
		}
	} else {
		dst.FeedTask = nil
	}

	// try to unmarshal JSON data into OneShotTask
	err = json.Unmarshal(data, &dst.OneShotTask)
	if err == nil {
		jsonOneShotTask, _ := json.Marshal(dst.OneShotTask)
		if string(jsonOneShotTask) == "{}" { // empty struct
			dst.OneShotTask = nil
		} else {
			return nil // data stored in dst.OneShotTask, return on the first match
		}
	} else {
		dst.OneShotTask = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TasksInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TasksInner) MarshalJSON() ([]byte, error) {
	if src.AnalyticsTask != nil {
		return json.Marshal(&src.AnalyticsTask)
	}

	if src.ExportTaskOutput != nil {
		return json.Marshal(&src.ExportTaskOutput)
	}

	if src.FeedTask != nil {
		return json.Marshal(&src.FeedTask)
	}

	if src.OneShotTask != nil {
		return json.Marshal(&src.OneShotTask)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableTasksInner struct {
	value *TasksInner
	isSet bool
}

func (v NullableTasksInner) Get() *TasksInner {
	return v.value
}

func (v *NullableTasksInner) Set(val *TasksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTasksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTasksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTasksInner(val *TasksInner) *NullableTasksInner {
	return &NullableTasksInner{value: val, isSet: true}
}

func (v NullableTasksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTasksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
