/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
)

// checks if the TemplateSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateSearchRequest{}

// TemplateSearchRequest struct for TemplateSearchRequest
type TemplateSearchRequest struct {
	Name                 *string `json:"name,omitempty"`
	Count                *int32  `json:"count,omitempty"`
	Page                 *int32  `json:"page,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TemplateSearchRequest TemplateSearchRequest

// NewTemplateSearchRequest instantiates a new TemplateSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateSearchRequest() *TemplateSearchRequest {
	this := TemplateSearchRequest{}
	var name string = ""
	this.Name = &name
	var count int32 = 50
	this.Count = &count
	var page int32 = 0
	this.Page = &page
	return &this
}

// NewTemplateSearchRequestWithDefaults instantiates a new TemplateSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateSearchRequestWithDefaults() *TemplateSearchRequest {
	this := TemplateSearchRequest{}
	var name string = ""
	this.Name = &name
	var count int32 = 50
	this.Count = &count
	var page int32 = 0
	this.Page = &page
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TemplateSearchRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSearchRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TemplateSearchRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TemplateSearchRequest) SetName(v string) {
	o.Name = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *TemplateSearchRequest) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSearchRequest) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *TemplateSearchRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *TemplateSearchRequest) SetCount(v int32) {
	o.Count = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *TemplateSearchRequest) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSearchRequest) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *TemplateSearchRequest) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *TemplateSearchRequest) SetPage(v int32) {
	o.Page = &v
}

func (o TemplateSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TemplateSearchRequest) UnmarshalJSON(data []byte) (err error) {
	varTemplateSearchRequest := _TemplateSearchRequest{}

	err = json.Unmarshal(data, &varTemplateSearchRequest)

	if err != nil {
		return err
	}

	*o = TemplateSearchRequest(varTemplateSearchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "count")
		delete(additionalProperties, "page")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTemplateSearchRequest struct {
	value *TemplateSearchRequest
	isSet bool
}

func (v NullableTemplateSearchRequest) Get() *TemplateSearchRequest {
	return v.value
}

func (v *NullableTemplateSearchRequest) Set(val *TemplateSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateSearchRequest(val *TemplateSearchRequest) *NullableTemplateSearchRequest {
	return &NullableTemplateSearchRequest{value: val, isSet: true}
}

func (v NullableTemplateSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
