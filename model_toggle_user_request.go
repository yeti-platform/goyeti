/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the ToggleUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToggleUserRequest{}

// ToggleUserRequest struct for ToggleUserRequest
type ToggleUserRequest struct {
	UserId               string          `json:"user_id"`
	Field                ToggleableField `json:"field"`
	AdditionalProperties map[string]interface{}
}

type _ToggleUserRequest ToggleUserRequest

// NewToggleUserRequest instantiates a new ToggleUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToggleUserRequest(userId string, field ToggleableField) *ToggleUserRequest {
	this := ToggleUserRequest{}
	this.UserId = userId
	this.Field = field
	return &this
}

// NewToggleUserRequestWithDefaults instantiates a new ToggleUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToggleUserRequestWithDefaults() *ToggleUserRequest {
	this := ToggleUserRequest{}
	return &this
}

// GetUserId returns the UserId field value
func (o *ToggleUserRequest) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ToggleUserRequest) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ToggleUserRequest) SetUserId(v string) {
	o.UserId = v
}

// GetField returns the Field field value
func (o *ToggleUserRequest) GetField() ToggleableField {
	if o == nil {
		var ret ToggleableField
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *ToggleUserRequest) GetFieldOk() (*ToggleableField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *ToggleUserRequest) SetField(v ToggleableField) {
	o.Field = v
}

func (o ToggleUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToggleUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_id"] = o.UserId
	toSerialize["field"] = o.Field

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ToggleUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
		"field",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToggleUserRequest := _ToggleUserRequest{}

	err = json.Unmarshal(data, &varToggleUserRequest)

	if err != nil {
		return err
	}

	*o = ToggleUserRequest(varToggleUserRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "field")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToggleUserRequest struct {
	value *ToggleUserRequest
	isSet bool
}

func (v NullableToggleUserRequest) Get() *ToggleUserRequest {
	return v.value
}

func (v *NullableToggleUserRequest) Set(val *ToggleUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableToggleUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableToggleUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToggleUserRequest(val *ToggleUserRequest) *NullableToggleUserRequest {
	return &NullableToggleUserRequest{value: val, isSet: true}
}

func (v NullableToggleUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToggleUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
