/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRequest{}

// UpdateRequest struct for UpdateRequest
type UpdateRequest struct {
	Name                 string   `json:"name"`
	DefaultExpiration    *string  `json:"default_expiration,omitempty"`
	Produces             []string `json:"produces,omitempty"`
	Replaces             []string `json:"replaces,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRequest UpdateRequest

// NewUpdateRequest instantiates a new UpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRequest(name string) *UpdateRequest {
	this := UpdateRequest{}
	this.Name = name
	var defaultExpiration string = "P90D"
	this.DefaultExpiration = &defaultExpiration
	return &this
}

// NewUpdateRequestWithDefaults instantiates a new UpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRequestWithDefaults() *UpdateRequest {
	this := UpdateRequest{}
	var defaultExpiration string = "P90D"
	this.DefaultExpiration = &defaultExpiration
	return &this
}

// GetName returns the Name field value
func (o *UpdateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateRequest) SetName(v string) {
	o.Name = v
}

// GetDefaultExpiration returns the DefaultExpiration field value if set, zero value otherwise.
func (o *UpdateRequest) GetDefaultExpiration() string {
	if o == nil || IsNil(o.DefaultExpiration) {
		var ret string
		return ret
	}
	return *o.DefaultExpiration
}

// GetDefaultExpirationOk returns a tuple with the DefaultExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetDefaultExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultExpiration) {
		return nil, false
	}
	return o.DefaultExpiration, true
}

// HasDefaultExpiration returns a boolean if a field has been set.
func (o *UpdateRequest) HasDefaultExpiration() bool {
	if o != nil && !IsNil(o.DefaultExpiration) {
		return true
	}

	return false
}

// SetDefaultExpiration gets a reference to the given string and assigns it to the DefaultExpiration field.
func (o *UpdateRequest) SetDefaultExpiration(v string) {
	o.DefaultExpiration = &v
}

// GetProduces returns the Produces field value if set, zero value otherwise.
func (o *UpdateRequest) GetProduces() []string {
	if o == nil || IsNil(o.Produces) {
		var ret []string
		return ret
	}
	return o.Produces
}

// GetProducesOk returns a tuple with the Produces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetProducesOk() ([]string, bool) {
	if o == nil || IsNil(o.Produces) {
		return nil, false
	}
	return o.Produces, true
}

// HasProduces returns a boolean if a field has been set.
func (o *UpdateRequest) HasProduces() bool {
	if o != nil && !IsNil(o.Produces) {
		return true
	}

	return false
}

// SetProduces gets a reference to the given []string and assigns it to the Produces field.
func (o *UpdateRequest) SetProduces(v []string) {
	o.Produces = v
}

// GetReplaces returns the Replaces field value if set, zero value otherwise.
func (o *UpdateRequest) GetReplaces() []string {
	if o == nil || IsNil(o.Replaces) {
		var ret []string
		return ret
	}
	return o.Replaces
}

// GetReplacesOk returns a tuple with the Replaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetReplacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Replaces) {
		return nil, false
	}
	return o.Replaces, true
}

// HasReplaces returns a boolean if a field has been set.
func (o *UpdateRequest) HasReplaces() bool {
	if o != nil && !IsNil(o.Replaces) {
		return true
	}

	return false
}

// SetReplaces gets a reference to the given []string and assigns it to the Replaces field.
func (o *UpdateRequest) SetReplaces(v []string) {
	o.Replaces = v
}

func (o UpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.DefaultExpiration) {
		toSerialize["default_expiration"] = o.DefaultExpiration
	}
	if !IsNil(o.Produces) {
		toSerialize["produces"] = o.Produces
	}
	if !IsNil(o.Replaces) {
		toSerialize["replaces"] = o.Replaces
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateRequest := _UpdateRequest{}

	err = json.Unmarshal(data, &varUpdateRequest)

	if err != nil {
		return err
	}

	*o = UpdateRequest(varUpdateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "default_expiration")
		delete(additionalProperties, "produces")
		delete(additionalProperties, "replaces")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRequest struct {
	value *UpdateRequest
	isSet bool
}

func (v NullableUpdateRequest) Get() *UpdateRequest {
	return v.value
}

func (v *NullableUpdateRequest) Set(val *UpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRequest(val *UpdateRequest) *NullableUpdateRequest {
	return &NullableUpdateRequest{value: val, isSet: true}
}

func (v NullableUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
