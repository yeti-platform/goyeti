/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UserAccountOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAccountOutput{}

// UserAccountOutput Represents a user account observable based on the Oasis schema. https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_azo70vgj1vm2  account_login and account_type must be provided. Value should to be in the form <ACCOUNT_TYPE>:<ACCOUNT_LOGIN>.
type UserAccountOutput struct {
	Value                 string                           `json:"value"`
	Type                  *string                          `json:"type,omitempty"`
	Created               *time.Time                       `json:"created,omitempty"`
	Context               []map[string]interface{}         `json:"context,omitempty"`
	LastAnalysis          map[string]time.Time             `json:"last_analysis,omitempty"`
	UserId                NullableString                   `json:"user_id,omitempty"`
	Credential            NullableString                   `json:"credential,omitempty"`
	AccountLogin          NullableString                   `json:"account_login,omitempty"`
	AccountType           NullableString                   `json:"account_type,omitempty"`
	DisplayName           NullableString                   `json:"display_name,omitempty"`
	IsServiceAccount      NullableBool                     `json:"is_service_account,omitempty"`
	IsPrivileged          NullableBool                     `json:"is_privileged,omitempty"`
	CanEscalatePrivs      NullableBool                     `json:"can_escalate_privs,omitempty"`
	IsDisabled            NullableBool                     `json:"is_disabled,omitempty"`
	AccountCreated        NullableTime                     `json:"account_created,omitempty"`
	AccountExpires        NullableTime                     `json:"account_expires,omitempty"`
	CredentialLastChanged NullableTime                     `json:"credential_last_changed,omitempty"`
	AccountFirstLogin     NullableTime                     `json:"account_first_login,omitempty"`
	AccountLastLogin      NullableTime                     `json:"account_last_login,omitempty"`
	Id                    string                           `json:"id"`
	Tags                  map[string]TagRelationshipOutput `json:"tags"`
	RootType              string                           `json:"root_type"`
}

type _UserAccountOutput UserAccountOutput

// NewUserAccountOutput instantiates a new UserAccountOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccountOutput(value string, id string, tags map[string]TagRelationshipOutput, rootType string) *UserAccountOutput {
	this := UserAccountOutput{}
	this.Value = value
	var type_ string = "user_account"
	this.Type = &type_
	this.Id = id
	this.Tags = tags
	this.RootType = rootType
	return &this
}

// NewUserAccountOutputWithDefaults instantiates a new UserAccountOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountOutputWithDefaults() *UserAccountOutput {
	this := UserAccountOutput{}
	var type_ string = "user_account"
	this.Type = &type_
	return &this
}

// GetValue returns the Value field value
func (o *UserAccountOutput) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UserAccountOutput) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *UserAccountOutput) SetValue(v string) {
	o.Value = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserAccountOutput) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountOutput) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserAccountOutput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserAccountOutput) SetType(v string) {
	o.Type = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *UserAccountOutput) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountOutput) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *UserAccountOutput) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *UserAccountOutput) SetCreated(v time.Time) {
	o.Created = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *UserAccountOutput) GetContext() []map[string]interface{} {
	if o == nil || IsNil(o.Context) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountOutput) GetContextOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *UserAccountOutput) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given []map[string]interface{} and assigns it to the Context field.
func (o *UserAccountOutput) SetContext(v []map[string]interface{}) {
	o.Context = v
}

// GetLastAnalysis returns the LastAnalysis field value if set, zero value otherwise.
func (o *UserAccountOutput) GetLastAnalysis() map[string]time.Time {
	if o == nil || IsNil(o.LastAnalysis) {
		var ret map[string]time.Time
		return ret
	}
	return o.LastAnalysis
}

// GetLastAnalysisOk returns a tuple with the LastAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountOutput) GetLastAnalysisOk() (map[string]time.Time, bool) {
	if o == nil || IsNil(o.LastAnalysis) {
		return map[string]time.Time{}, false
	}
	return o.LastAnalysis, true
}

// HasLastAnalysis returns a boolean if a field has been set.
func (o *UserAccountOutput) HasLastAnalysis() bool {
	if o != nil && !IsNil(o.LastAnalysis) {
		return true
	}

	return false
}

// SetLastAnalysis gets a reference to the given map[string]time.Time and assigns it to the LastAnalysis field.
func (o *UserAccountOutput) SetLastAnalysis(v map[string]time.Time) {
	o.LastAnalysis = v
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *UserAccountOutput) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *UserAccountOutput) SetUserId(v string) {
	o.UserId.Set(&v)
}

// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *UserAccountOutput) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *UserAccountOutput) UnsetUserId() {
	o.UserId.Unset()
}

// GetCredential returns the Credential field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetCredential() string {
	if o == nil || IsNil(o.Credential.Get()) {
		var ret string
		return ret
	}
	return *o.Credential.Get()
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetCredentialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Credential.Get(), o.Credential.IsSet()
}

// HasCredential returns a boolean if a field has been set.
func (o *UserAccountOutput) HasCredential() bool {
	if o != nil && o.Credential.IsSet() {
		return true
	}

	return false
}

// SetCredential gets a reference to the given NullableString and assigns it to the Credential field.
func (o *UserAccountOutput) SetCredential(v string) {
	o.Credential.Set(&v)
}

// SetCredentialNil sets the value for Credential to be an explicit nil
func (o *UserAccountOutput) SetCredentialNil() {
	o.Credential.Set(nil)
}

// UnsetCredential ensures that no value is present for Credential, not even an explicit nil
func (o *UserAccountOutput) UnsetCredential() {
	o.Credential.Unset()
}

// GetAccountLogin returns the AccountLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetAccountLogin() string {
	if o == nil || IsNil(o.AccountLogin.Get()) {
		var ret string
		return ret
	}
	return *o.AccountLogin.Get()
}

// GetAccountLoginOk returns a tuple with the AccountLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetAccountLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountLogin.Get(), o.AccountLogin.IsSet()
}

// HasAccountLogin returns a boolean if a field has been set.
func (o *UserAccountOutput) HasAccountLogin() bool {
	if o != nil && o.AccountLogin.IsSet() {
		return true
	}

	return false
}

// SetAccountLogin gets a reference to the given NullableString and assigns it to the AccountLogin field.
func (o *UserAccountOutput) SetAccountLogin(v string) {
	o.AccountLogin.Set(&v)
}

// SetAccountLoginNil sets the value for AccountLogin to be an explicit nil
func (o *UserAccountOutput) SetAccountLoginNil() {
	o.AccountLogin.Set(nil)
}

// UnsetAccountLogin ensures that no value is present for AccountLogin, not even an explicit nil
func (o *UserAccountOutput) UnsetAccountLogin() {
	o.AccountLogin.Unset()
}

// GetAccountType returns the AccountType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetAccountType() string {
	if o == nil || IsNil(o.AccountType.Get()) {
		var ret string
		return ret
	}
	return *o.AccountType.Get()
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetAccountTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountType.Get(), o.AccountType.IsSet()
}

// HasAccountType returns a boolean if a field has been set.
func (o *UserAccountOutput) HasAccountType() bool {
	if o != nil && o.AccountType.IsSet() {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given NullableString and assigns it to the AccountType field.
func (o *UserAccountOutput) SetAccountType(v string) {
	o.AccountType.Set(&v)
}

// SetAccountTypeNil sets the value for AccountType to be an explicit nil
func (o *UserAccountOutput) SetAccountTypeNil() {
	o.AccountType.Set(nil)
}

// UnsetAccountType ensures that no value is present for AccountType, not even an explicit nil
func (o *UserAccountOutput) UnsetAccountType() {
	o.AccountType.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UserAccountOutput) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *UserAccountOutput) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *UserAccountOutput) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *UserAccountOutput) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetIsServiceAccount returns the IsServiceAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetIsServiceAccount() bool {
	if o == nil || IsNil(o.IsServiceAccount.Get()) {
		var ret bool
		return ret
	}
	return *o.IsServiceAccount.Get()
}

// GetIsServiceAccountOk returns a tuple with the IsServiceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetIsServiceAccountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsServiceAccount.Get(), o.IsServiceAccount.IsSet()
}

// HasIsServiceAccount returns a boolean if a field has been set.
func (o *UserAccountOutput) HasIsServiceAccount() bool {
	if o != nil && o.IsServiceAccount.IsSet() {
		return true
	}

	return false
}

// SetIsServiceAccount gets a reference to the given NullableBool and assigns it to the IsServiceAccount field.
func (o *UserAccountOutput) SetIsServiceAccount(v bool) {
	o.IsServiceAccount.Set(&v)
}

// SetIsServiceAccountNil sets the value for IsServiceAccount to be an explicit nil
func (o *UserAccountOutput) SetIsServiceAccountNil() {
	o.IsServiceAccount.Set(nil)
}

// UnsetIsServiceAccount ensures that no value is present for IsServiceAccount, not even an explicit nil
func (o *UserAccountOutput) UnsetIsServiceAccount() {
	o.IsServiceAccount.Unset()
}

// GetIsPrivileged returns the IsPrivileged field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetIsPrivileged() bool {
	if o == nil || IsNil(o.IsPrivileged.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPrivileged.Get()
}

// GetIsPrivilegedOk returns a tuple with the IsPrivileged field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetIsPrivilegedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPrivileged.Get(), o.IsPrivileged.IsSet()
}

// HasIsPrivileged returns a boolean if a field has been set.
func (o *UserAccountOutput) HasIsPrivileged() bool {
	if o != nil && o.IsPrivileged.IsSet() {
		return true
	}

	return false
}

// SetIsPrivileged gets a reference to the given NullableBool and assigns it to the IsPrivileged field.
func (o *UserAccountOutput) SetIsPrivileged(v bool) {
	o.IsPrivileged.Set(&v)
}

// SetIsPrivilegedNil sets the value for IsPrivileged to be an explicit nil
func (o *UserAccountOutput) SetIsPrivilegedNil() {
	o.IsPrivileged.Set(nil)
}

// UnsetIsPrivileged ensures that no value is present for IsPrivileged, not even an explicit nil
func (o *UserAccountOutput) UnsetIsPrivileged() {
	o.IsPrivileged.Unset()
}

// GetCanEscalatePrivs returns the CanEscalatePrivs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetCanEscalatePrivs() bool {
	if o == nil || IsNil(o.CanEscalatePrivs.Get()) {
		var ret bool
		return ret
	}
	return *o.CanEscalatePrivs.Get()
}

// GetCanEscalatePrivsOk returns a tuple with the CanEscalatePrivs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetCanEscalatePrivsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanEscalatePrivs.Get(), o.CanEscalatePrivs.IsSet()
}

// HasCanEscalatePrivs returns a boolean if a field has been set.
func (o *UserAccountOutput) HasCanEscalatePrivs() bool {
	if o != nil && o.CanEscalatePrivs.IsSet() {
		return true
	}

	return false
}

// SetCanEscalatePrivs gets a reference to the given NullableBool and assigns it to the CanEscalatePrivs field.
func (o *UserAccountOutput) SetCanEscalatePrivs(v bool) {
	o.CanEscalatePrivs.Set(&v)
}

// SetCanEscalatePrivsNil sets the value for CanEscalatePrivs to be an explicit nil
func (o *UserAccountOutput) SetCanEscalatePrivsNil() {
	o.CanEscalatePrivs.Set(nil)
}

// UnsetCanEscalatePrivs ensures that no value is present for CanEscalatePrivs, not even an explicit nil
func (o *UserAccountOutput) UnsetCanEscalatePrivs() {
	o.CanEscalatePrivs.Unset()
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDisabled.Get()
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetIsDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDisabled.Get(), o.IsDisabled.IsSet()
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *UserAccountOutput) HasIsDisabled() bool {
	if o != nil && o.IsDisabled.IsSet() {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given NullableBool and assigns it to the IsDisabled field.
func (o *UserAccountOutput) SetIsDisabled(v bool) {
	o.IsDisabled.Set(&v)
}

// SetIsDisabledNil sets the value for IsDisabled to be an explicit nil
func (o *UserAccountOutput) SetIsDisabledNil() {
	o.IsDisabled.Set(nil)
}

// UnsetIsDisabled ensures that no value is present for IsDisabled, not even an explicit nil
func (o *UserAccountOutput) UnsetIsDisabled() {
	o.IsDisabled.Unset()
}

// GetAccountCreated returns the AccountCreated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetAccountCreated() time.Time {
	if o == nil || IsNil(o.AccountCreated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AccountCreated.Get()
}

// GetAccountCreatedOk returns a tuple with the AccountCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetAccountCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountCreated.Get(), o.AccountCreated.IsSet()
}

// HasAccountCreated returns a boolean if a field has been set.
func (o *UserAccountOutput) HasAccountCreated() bool {
	if o != nil && o.AccountCreated.IsSet() {
		return true
	}

	return false
}

// SetAccountCreated gets a reference to the given NullableTime and assigns it to the AccountCreated field.
func (o *UserAccountOutput) SetAccountCreated(v time.Time) {
	o.AccountCreated.Set(&v)
}

// SetAccountCreatedNil sets the value for AccountCreated to be an explicit nil
func (o *UserAccountOutput) SetAccountCreatedNil() {
	o.AccountCreated.Set(nil)
}

// UnsetAccountCreated ensures that no value is present for AccountCreated, not even an explicit nil
func (o *UserAccountOutput) UnsetAccountCreated() {
	o.AccountCreated.Unset()
}

// GetAccountExpires returns the AccountExpires field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetAccountExpires() time.Time {
	if o == nil || IsNil(o.AccountExpires.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AccountExpires.Get()
}

// GetAccountExpiresOk returns a tuple with the AccountExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetAccountExpiresOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountExpires.Get(), o.AccountExpires.IsSet()
}

// HasAccountExpires returns a boolean if a field has been set.
func (o *UserAccountOutput) HasAccountExpires() bool {
	if o != nil && o.AccountExpires.IsSet() {
		return true
	}

	return false
}

// SetAccountExpires gets a reference to the given NullableTime and assigns it to the AccountExpires field.
func (o *UserAccountOutput) SetAccountExpires(v time.Time) {
	o.AccountExpires.Set(&v)
}

// SetAccountExpiresNil sets the value for AccountExpires to be an explicit nil
func (o *UserAccountOutput) SetAccountExpiresNil() {
	o.AccountExpires.Set(nil)
}

// UnsetAccountExpires ensures that no value is present for AccountExpires, not even an explicit nil
func (o *UserAccountOutput) UnsetAccountExpires() {
	o.AccountExpires.Unset()
}

// GetCredentialLastChanged returns the CredentialLastChanged field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetCredentialLastChanged() time.Time {
	if o == nil || IsNil(o.CredentialLastChanged.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CredentialLastChanged.Get()
}

// GetCredentialLastChangedOk returns a tuple with the CredentialLastChanged field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetCredentialLastChangedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CredentialLastChanged.Get(), o.CredentialLastChanged.IsSet()
}

// HasCredentialLastChanged returns a boolean if a field has been set.
func (o *UserAccountOutput) HasCredentialLastChanged() bool {
	if o != nil && o.CredentialLastChanged.IsSet() {
		return true
	}

	return false
}

// SetCredentialLastChanged gets a reference to the given NullableTime and assigns it to the CredentialLastChanged field.
func (o *UserAccountOutput) SetCredentialLastChanged(v time.Time) {
	o.CredentialLastChanged.Set(&v)
}

// SetCredentialLastChangedNil sets the value for CredentialLastChanged to be an explicit nil
func (o *UserAccountOutput) SetCredentialLastChangedNil() {
	o.CredentialLastChanged.Set(nil)
}

// UnsetCredentialLastChanged ensures that no value is present for CredentialLastChanged, not even an explicit nil
func (o *UserAccountOutput) UnsetCredentialLastChanged() {
	o.CredentialLastChanged.Unset()
}

// GetAccountFirstLogin returns the AccountFirstLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetAccountFirstLogin() time.Time {
	if o == nil || IsNil(o.AccountFirstLogin.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AccountFirstLogin.Get()
}

// GetAccountFirstLoginOk returns a tuple with the AccountFirstLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetAccountFirstLoginOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountFirstLogin.Get(), o.AccountFirstLogin.IsSet()
}

// HasAccountFirstLogin returns a boolean if a field has been set.
func (o *UserAccountOutput) HasAccountFirstLogin() bool {
	if o != nil && o.AccountFirstLogin.IsSet() {
		return true
	}

	return false
}

// SetAccountFirstLogin gets a reference to the given NullableTime and assigns it to the AccountFirstLogin field.
func (o *UserAccountOutput) SetAccountFirstLogin(v time.Time) {
	o.AccountFirstLogin.Set(&v)
}

// SetAccountFirstLoginNil sets the value for AccountFirstLogin to be an explicit nil
func (o *UserAccountOutput) SetAccountFirstLoginNil() {
	o.AccountFirstLogin.Set(nil)
}

// UnsetAccountFirstLogin ensures that no value is present for AccountFirstLogin, not even an explicit nil
func (o *UserAccountOutput) UnsetAccountFirstLogin() {
	o.AccountFirstLogin.Unset()
}

// GetAccountLastLogin returns the AccountLastLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountOutput) GetAccountLastLogin() time.Time {
	if o == nil || IsNil(o.AccountLastLogin.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AccountLastLogin.Get()
}

// GetAccountLastLoginOk returns a tuple with the AccountLastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountOutput) GetAccountLastLoginOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountLastLogin.Get(), o.AccountLastLogin.IsSet()
}

// HasAccountLastLogin returns a boolean if a field has been set.
func (o *UserAccountOutput) HasAccountLastLogin() bool {
	if o != nil && o.AccountLastLogin.IsSet() {
		return true
	}

	return false
}

// SetAccountLastLogin gets a reference to the given NullableTime and assigns it to the AccountLastLogin field.
func (o *UserAccountOutput) SetAccountLastLogin(v time.Time) {
	o.AccountLastLogin.Set(&v)
}

// SetAccountLastLoginNil sets the value for AccountLastLogin to be an explicit nil
func (o *UserAccountOutput) SetAccountLastLoginNil() {
	o.AccountLastLogin.Set(nil)
}

// UnsetAccountLastLogin ensures that no value is present for AccountLastLogin, not even an explicit nil
func (o *UserAccountOutput) UnsetAccountLastLogin() {
	o.AccountLastLogin.Unset()
}

// GetId returns the Id field value
func (o *UserAccountOutput) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserAccountOutput) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserAccountOutput) SetId(v string) {
	o.Id = v
}

// GetTags returns the Tags field value
func (o *UserAccountOutput) GetTags() map[string]TagRelationshipOutput {
	if o == nil {
		var ret map[string]TagRelationshipOutput
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *UserAccountOutput) GetTagsOk() (map[string]TagRelationshipOutput, bool) {
	if o == nil {
		return map[string]TagRelationshipOutput{}, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *UserAccountOutput) SetTags(v map[string]TagRelationshipOutput) {
	o.Tags = v
}

// GetRootType returns the RootType field value
func (o *UserAccountOutput) GetRootType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootType
}

// GetRootTypeOk returns a tuple with the RootType field value
// and a boolean to check if the value has been set.
func (o *UserAccountOutput) GetRootTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootType, true
}

// SetRootType sets field value
func (o *UserAccountOutput) SetRootType(v string) {
	o.RootType = v
}

func (o UserAccountOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAccountOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.LastAnalysis) {
		toSerialize["last_analysis"] = o.LastAnalysis
	}
	if o.UserId.IsSet() {
		toSerialize["user_id"] = o.UserId.Get()
	}
	if o.Credential.IsSet() {
		toSerialize["credential"] = o.Credential.Get()
	}
	if o.AccountLogin.IsSet() {
		toSerialize["account_login"] = o.AccountLogin.Get()
	}
	if o.AccountType.IsSet() {
		toSerialize["account_type"] = o.AccountType.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["display_name"] = o.DisplayName.Get()
	}
	if o.IsServiceAccount.IsSet() {
		toSerialize["is_service_account"] = o.IsServiceAccount.Get()
	}
	if o.IsPrivileged.IsSet() {
		toSerialize["is_privileged"] = o.IsPrivileged.Get()
	}
	if o.CanEscalatePrivs.IsSet() {
		toSerialize["can_escalate_privs"] = o.CanEscalatePrivs.Get()
	}
	if o.IsDisabled.IsSet() {
		toSerialize["is_disabled"] = o.IsDisabled.Get()
	}
	if o.AccountCreated.IsSet() {
		toSerialize["account_created"] = o.AccountCreated.Get()
	}
	if o.AccountExpires.IsSet() {
		toSerialize["account_expires"] = o.AccountExpires.Get()
	}
	if o.CredentialLastChanged.IsSet() {
		toSerialize["credential_last_changed"] = o.CredentialLastChanged.Get()
	}
	if o.AccountFirstLogin.IsSet() {
		toSerialize["account_first_login"] = o.AccountFirstLogin.Get()
	}
	if o.AccountLastLogin.IsSet() {
		toSerialize["account_last_login"] = o.AccountLastLogin.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["tags"] = o.Tags
	toSerialize["root_type"] = o.RootType
	return toSerialize, nil
}

func (o *UserAccountOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"id",
		"tags",
		"root_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAccountOutput := _UserAccountOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserAccountOutput)

	if err != nil {
		return err
	}

	*o = UserAccountOutput(varUserAccountOutput)

	return err
}

type NullableUserAccountOutput struct {
	value *UserAccountOutput
	isSet bool
}

func (v NullableUserAccountOutput) Get() *UserAccountOutput {
	return v.value
}

func (v *NullableUserAccountOutput) Set(val *UserAccountOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccountOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccountOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccountOutput(val *UserAccountOutput) *NullableUserAccountOutput {
	return &NullableUserAccountOutput{value: val, isSet: true}
}

func (v NullableUserAccountOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccountOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
