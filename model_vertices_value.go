/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"encoding/json"
	"fmt"
)

// VerticesValue struct for VerticesValue
type VerticesValue struct {
	AttackPatternOutput    *AttackPatternOutput
	CampaignOutput         *CampaignOutput
	CompanyOutput          *CompanyOutput
	CourseOfActionOutput   *CourseOfActionOutput
	DfiqInner              *DfiqInner
	ForensicArtifactOutput *ForensicArtifactOutput
	IdentityOutput         *IdentityOutput
	IntrusionSetOutput     *IntrusionSetOutput
	InvestigationOutput    *InvestigationOutput
	MalwareOutput          *MalwareOutput
	NoteOutput             *NoteOutput
	Observable             *Observable
	PhoneOutput            *PhoneOutput
	QueryOutput            *QueryOutput
	RegexOutput            *RegexOutput
	SigmaOutput            *SigmaOutput
	SuricataOutput         *SuricataOutput
	Tag                    *Tag
	ThreatActorOutput      *ThreatActorOutput
	ToolOutput             *ToolOutput
	VulnerabilityOutput    *VulnerabilityOutput
	YaraOutput             *YaraOutput
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *VerticesValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AttackPatternOutput
	err = json.Unmarshal(data, &dst.AttackPatternOutput)
	if err == nil {
		jsonAttackPatternOutput, _ := json.Marshal(dst.AttackPatternOutput)
		if string(jsonAttackPatternOutput) == "{}" { // empty struct
			dst.AttackPatternOutput = nil
		} else {
			return nil // data stored in dst.AttackPatternOutput, return on the first match
		}
	} else {
		dst.AttackPatternOutput = nil
	}

	// try to unmarshal JSON data into CampaignOutput
	err = json.Unmarshal(data, &dst.CampaignOutput)
	if err == nil {
		jsonCampaignOutput, _ := json.Marshal(dst.CampaignOutput)
		if string(jsonCampaignOutput) == "{}" { // empty struct
			dst.CampaignOutput = nil
		} else {
			return nil // data stored in dst.CampaignOutput, return on the first match
		}
	} else {
		dst.CampaignOutput = nil
	}

	// try to unmarshal JSON data into CompanyOutput
	err = json.Unmarshal(data, &dst.CompanyOutput)
	if err == nil {
		jsonCompanyOutput, _ := json.Marshal(dst.CompanyOutput)
		if string(jsonCompanyOutput) == "{}" { // empty struct
			dst.CompanyOutput = nil
		} else {
			return nil // data stored in dst.CompanyOutput, return on the first match
		}
	} else {
		dst.CompanyOutput = nil
	}

	// try to unmarshal JSON data into CourseOfActionOutput
	err = json.Unmarshal(data, &dst.CourseOfActionOutput)
	if err == nil {
		jsonCourseOfActionOutput, _ := json.Marshal(dst.CourseOfActionOutput)
		if string(jsonCourseOfActionOutput) == "{}" { // empty struct
			dst.CourseOfActionOutput = nil
		} else {
			return nil // data stored in dst.CourseOfActionOutput, return on the first match
		}
	} else {
		dst.CourseOfActionOutput = nil
	}

	// try to unmarshal JSON data into DfiqInner
	err = json.Unmarshal(data, &dst.DfiqInner)
	if err == nil {
		jsonDfiqInner, _ := json.Marshal(dst.DfiqInner)
		if string(jsonDfiqInner) == "{}" { // empty struct
			dst.DfiqInner = nil
		} else {
			return nil // data stored in dst.DfiqInner, return on the first match
		}
	} else {
		dst.DfiqInner = nil
	}

	// try to unmarshal JSON data into ForensicArtifactOutput
	err = json.Unmarshal(data, &dst.ForensicArtifactOutput)
	if err == nil {
		jsonForensicArtifactOutput, _ := json.Marshal(dst.ForensicArtifactOutput)
		if string(jsonForensicArtifactOutput) == "{}" { // empty struct
			dst.ForensicArtifactOutput = nil
		} else {
			return nil // data stored in dst.ForensicArtifactOutput, return on the first match
		}
	} else {
		dst.ForensicArtifactOutput = nil
	}

	// try to unmarshal JSON data into IdentityOutput
	err = json.Unmarshal(data, &dst.IdentityOutput)
	if err == nil {
		jsonIdentityOutput, _ := json.Marshal(dst.IdentityOutput)
		if string(jsonIdentityOutput) == "{}" { // empty struct
			dst.IdentityOutput = nil
		} else {
			return nil // data stored in dst.IdentityOutput, return on the first match
		}
	} else {
		dst.IdentityOutput = nil
	}

	// try to unmarshal JSON data into IntrusionSetOutput
	err = json.Unmarshal(data, &dst.IntrusionSetOutput)
	if err == nil {
		jsonIntrusionSetOutput, _ := json.Marshal(dst.IntrusionSetOutput)
		if string(jsonIntrusionSetOutput) == "{}" { // empty struct
			dst.IntrusionSetOutput = nil
		} else {
			return nil // data stored in dst.IntrusionSetOutput, return on the first match
		}
	} else {
		dst.IntrusionSetOutput = nil
	}

	// try to unmarshal JSON data into InvestigationOutput
	err = json.Unmarshal(data, &dst.InvestigationOutput)
	if err == nil {
		jsonInvestigationOutput, _ := json.Marshal(dst.InvestigationOutput)
		if string(jsonInvestigationOutput) == "{}" { // empty struct
			dst.InvestigationOutput = nil
		} else {
			return nil // data stored in dst.InvestigationOutput, return on the first match
		}
	} else {
		dst.InvestigationOutput = nil
	}

	// try to unmarshal JSON data into MalwareOutput
	err = json.Unmarshal(data, &dst.MalwareOutput)
	if err == nil {
		jsonMalwareOutput, _ := json.Marshal(dst.MalwareOutput)
		if string(jsonMalwareOutput) == "{}" { // empty struct
			dst.MalwareOutput = nil
		} else {
			return nil // data stored in dst.MalwareOutput, return on the first match
		}
	} else {
		dst.MalwareOutput = nil
	}

	// try to unmarshal JSON data into NoteOutput
	err = json.Unmarshal(data, &dst.NoteOutput)
	if err == nil {
		jsonNoteOutput, _ := json.Marshal(dst.NoteOutput)
		if string(jsonNoteOutput) == "{}" { // empty struct
			dst.NoteOutput = nil
		} else {
			return nil // data stored in dst.NoteOutput, return on the first match
		}
	} else {
		dst.NoteOutput = nil
	}

	// try to unmarshal JSON data into Observable
	err = json.Unmarshal(data, &dst.Observable)
	if err == nil {
		jsonObservable, _ := json.Marshal(dst.Observable)
		if string(jsonObservable) == "{}" { // empty struct
			dst.Observable = nil
		} else {
			return nil // data stored in dst.Observable, return on the first match
		}
	} else {
		dst.Observable = nil
	}

	// try to unmarshal JSON data into PhoneOutput
	err = json.Unmarshal(data, &dst.PhoneOutput)
	if err == nil {
		jsonPhoneOutput, _ := json.Marshal(dst.PhoneOutput)
		if string(jsonPhoneOutput) == "{}" { // empty struct
			dst.PhoneOutput = nil
		} else {
			return nil // data stored in dst.PhoneOutput, return on the first match
		}
	} else {
		dst.PhoneOutput = nil
	}

	// try to unmarshal JSON data into QueryOutput
	err = json.Unmarshal(data, &dst.QueryOutput)
	if err == nil {
		jsonQueryOutput, _ := json.Marshal(dst.QueryOutput)
		if string(jsonQueryOutput) == "{}" { // empty struct
			dst.QueryOutput = nil
		} else {
			return nil // data stored in dst.QueryOutput, return on the first match
		}
	} else {
		dst.QueryOutput = nil
	}

	// try to unmarshal JSON data into RegexOutput
	err = json.Unmarshal(data, &dst.RegexOutput)
	if err == nil {
		jsonRegexOutput, _ := json.Marshal(dst.RegexOutput)
		if string(jsonRegexOutput) == "{}" { // empty struct
			dst.RegexOutput = nil
		} else {
			return nil // data stored in dst.RegexOutput, return on the first match
		}
	} else {
		dst.RegexOutput = nil
	}

	// try to unmarshal JSON data into SigmaOutput
	err = json.Unmarshal(data, &dst.SigmaOutput)
	if err == nil {
		jsonSigmaOutput, _ := json.Marshal(dst.SigmaOutput)
		if string(jsonSigmaOutput) == "{}" { // empty struct
			dst.SigmaOutput = nil
		} else {
			return nil // data stored in dst.SigmaOutput, return on the first match
		}
	} else {
		dst.SigmaOutput = nil
	}

	// try to unmarshal JSON data into SuricataOutput
	err = json.Unmarshal(data, &dst.SuricataOutput)
	if err == nil {
		jsonSuricataOutput, _ := json.Marshal(dst.SuricataOutput)
		if string(jsonSuricataOutput) == "{}" { // empty struct
			dst.SuricataOutput = nil
		} else {
			return nil // data stored in dst.SuricataOutput, return on the first match
		}
	} else {
		dst.SuricataOutput = nil
	}

	// try to unmarshal JSON data into Tag
	err = json.Unmarshal(data, &dst.Tag)
	if err == nil {
		jsonTag, _ := json.Marshal(dst.Tag)
		if string(jsonTag) == "{}" { // empty struct
			dst.Tag = nil
		} else {
			return nil // data stored in dst.Tag, return on the first match
		}
	} else {
		dst.Tag = nil
	}

	// try to unmarshal JSON data into ThreatActorOutput
	err = json.Unmarshal(data, &dst.ThreatActorOutput)
	if err == nil {
		jsonThreatActorOutput, _ := json.Marshal(dst.ThreatActorOutput)
		if string(jsonThreatActorOutput) == "{}" { // empty struct
			dst.ThreatActorOutput = nil
		} else {
			return nil // data stored in dst.ThreatActorOutput, return on the first match
		}
	} else {
		dst.ThreatActorOutput = nil
	}

	// try to unmarshal JSON data into ToolOutput
	err = json.Unmarshal(data, &dst.ToolOutput)
	if err == nil {
		jsonToolOutput, _ := json.Marshal(dst.ToolOutput)
		if string(jsonToolOutput) == "{}" { // empty struct
			dst.ToolOutput = nil
		} else {
			return nil // data stored in dst.ToolOutput, return on the first match
		}
	} else {
		dst.ToolOutput = nil
	}

	// try to unmarshal JSON data into VulnerabilityOutput
	err = json.Unmarshal(data, &dst.VulnerabilityOutput)
	if err == nil {
		jsonVulnerabilityOutput, _ := json.Marshal(dst.VulnerabilityOutput)
		if string(jsonVulnerabilityOutput) == "{}" { // empty struct
			dst.VulnerabilityOutput = nil
		} else {
			return nil // data stored in dst.VulnerabilityOutput, return on the first match
		}
	} else {
		dst.VulnerabilityOutput = nil
	}

	// try to unmarshal JSON data into YaraOutput
	err = json.Unmarshal(data, &dst.YaraOutput)
	if err == nil {
		jsonYaraOutput, _ := json.Marshal(dst.YaraOutput)
		if string(jsonYaraOutput) == "{}" { // empty struct
			dst.YaraOutput = nil
		} else {
			return nil // data stored in dst.YaraOutput, return on the first match
		}
	} else {
		dst.YaraOutput = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(VerticesValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VerticesValue) MarshalJSON() ([]byte, error) {
	if src.AttackPatternOutput != nil {
		return json.Marshal(&src.AttackPatternOutput)
	}

	if src.CampaignOutput != nil {
		return json.Marshal(&src.CampaignOutput)
	}

	if src.CompanyOutput != nil {
		return json.Marshal(&src.CompanyOutput)
	}

	if src.CourseOfActionOutput != nil {
		return json.Marshal(&src.CourseOfActionOutput)
	}

	if src.DfiqInner != nil {
		return json.Marshal(&src.DfiqInner)
	}

	if src.ForensicArtifactOutput != nil {
		return json.Marshal(&src.ForensicArtifactOutput)
	}

	if src.IdentityOutput != nil {
		return json.Marshal(&src.IdentityOutput)
	}

	if src.IntrusionSetOutput != nil {
		return json.Marshal(&src.IntrusionSetOutput)
	}

	if src.InvestigationOutput != nil {
		return json.Marshal(&src.InvestigationOutput)
	}

	if src.MalwareOutput != nil {
		return json.Marshal(&src.MalwareOutput)
	}

	if src.NoteOutput != nil {
		return json.Marshal(&src.NoteOutput)
	}

	if src.Observable != nil {
		return json.Marshal(&src.Observable)
	}

	if src.PhoneOutput != nil {
		return json.Marshal(&src.PhoneOutput)
	}

	if src.QueryOutput != nil {
		return json.Marshal(&src.QueryOutput)
	}

	if src.RegexOutput != nil {
		return json.Marshal(&src.RegexOutput)
	}

	if src.SigmaOutput != nil {
		return json.Marshal(&src.SigmaOutput)
	}

	if src.SuricataOutput != nil {
		return json.Marshal(&src.SuricataOutput)
	}

	if src.Tag != nil {
		return json.Marshal(&src.Tag)
	}

	if src.ThreatActorOutput != nil {
		return json.Marshal(&src.ThreatActorOutput)
	}

	if src.ToolOutput != nil {
		return json.Marshal(&src.ToolOutput)
	}

	if src.VulnerabilityOutput != nil {
		return json.Marshal(&src.VulnerabilityOutput)
	}

	if src.YaraOutput != nil {
		return json.Marshal(&src.YaraOutput)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableVerticesValue struct {
	value *VerticesValue
	isSet bool
}

func (v NullableVerticesValue) Get() *VerticesValue {
	return v.value
}

func (v *NullableVerticesValue) Set(val *VerticesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableVerticesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableVerticesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerticesValue(val *VerticesValue) *NullableVerticesValue {
	return &NullableVerticesValue{value: val, isSet: true}
}

func (v NullableVerticesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerticesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
