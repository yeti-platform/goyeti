/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the VulnerabilityOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerabilityOutput{}

// VulnerabilityOutput This class represents a vulnerability in the schema.  Attributes:     title: title of the vulnerability.     base_score : base score of the vulnerability obtained from CVSS metric                  ranging from 0.0 to 10.0.     severity: represents the severity of a vulnerability. One of none, low,               medium, high, critical.
type VulnerabilityOutput struct {
	Type                    *string                          `json:"type,omitempty"`
	Name                    string                           `json:"name"`
	Description             *string                          `json:"description,omitempty"`
	Context                 []map[string]interface{}         `json:"context,omitempty"`
	Created                 *time.Time                       `json:"created,omitempty"`
	Modified                *time.Time                       `json:"modified,omitempty"`
	Title                   *string                          `json:"title,omitempty"`
	BaseScore               *float32                         `json:"base_score,omitempty"`
	Severity                *SeverityType                    `json:"severity,omitempty"`
	Reference               *string                          `json:"reference,omitempty"`
	Id                      string                           `json:"id"`
	Tags                    map[string]TagRelationshipOutput `json:"tags"`
	RootType                string                           `json:"root_type"`
	RelatedObservablesCount int32                            `json:"related_observables_count"`
}

type _VulnerabilityOutput VulnerabilityOutput

// NewVulnerabilityOutput instantiates a new VulnerabilityOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilityOutput(name string, id string, tags map[string]TagRelationshipOutput, rootType string, relatedObservablesCount int32) *VulnerabilityOutput {
	this := VulnerabilityOutput{}
	var type_ string = "vulnerability"
	this.Type = &type_
	this.Name = name
	var description string = ""
	this.Description = &description
	var title string = ""
	this.Title = &title
	var baseScore float32 = 0.0
	this.BaseScore = &baseScore
	var reference string = ""
	this.Reference = &reference
	this.Id = id
	this.Tags = tags
	this.RootType = rootType
	this.RelatedObservablesCount = relatedObservablesCount
	return &this
}

// NewVulnerabilityOutputWithDefaults instantiates a new VulnerabilityOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityOutputWithDefaults() *VulnerabilityOutput {
	this := VulnerabilityOutput{}
	var type_ string = "vulnerability"
	this.Type = &type_
	var description string = ""
	this.Description = &description
	var title string = ""
	this.Title = &title
	var baseScore float32 = 0.0
	this.BaseScore = &baseScore
	var reference string = ""
	this.Reference = &reference
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VulnerabilityOutput) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value
func (o *VulnerabilityOutput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VulnerabilityOutput) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VulnerabilityOutput) SetDescription(v string) {
	o.Description = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetContext() []map[string]interface{} {
	if o == nil || IsNil(o.Context) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetContextOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given []map[string]interface{} and assigns it to the Context field.
func (o *VulnerabilityOutput) SetContext(v []map[string]interface{}) {
	o.Context = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *VulnerabilityOutput) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetModified() time.Time {
	if o == nil || IsNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *VulnerabilityOutput) SetModified(v time.Time) {
	o.Modified = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *VulnerabilityOutput) SetTitle(v string) {
	o.Title = &v
}

// GetBaseScore returns the BaseScore field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetBaseScore() float32 {
	if o == nil || IsNil(o.BaseScore) {
		var ret float32
		return ret
	}
	return *o.BaseScore
}

// GetBaseScoreOk returns a tuple with the BaseScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetBaseScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseScore) {
		return nil, false
	}
	return o.BaseScore, true
}

// HasBaseScore returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasBaseScore() bool {
	if o != nil && !IsNil(o.BaseScore) {
		return true
	}

	return false
}

// SetBaseScore gets a reference to the given float32 and assigns it to the BaseScore field.
func (o *VulnerabilityOutput) SetBaseScore(v float32) {
	o.BaseScore = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetSeverity() SeverityType {
	if o == nil || IsNil(o.Severity) {
		var ret SeverityType
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetSeverityOk() (*SeverityType, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given SeverityType and assigns it to the Severity field.
func (o *VulnerabilityOutput) SetSeverity(v SeverityType) {
	o.Severity = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *VulnerabilityOutput) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *VulnerabilityOutput) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *VulnerabilityOutput) SetReference(v string) {
	o.Reference = &v
}

// GetId returns the Id field value
func (o *VulnerabilityOutput) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VulnerabilityOutput) SetId(v string) {
	o.Id = v
}

// GetTags returns the Tags field value
func (o *VulnerabilityOutput) GetTags() map[string]TagRelationshipOutput {
	if o == nil {
		var ret map[string]TagRelationshipOutput
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetTagsOk() (map[string]TagRelationshipOutput, bool) {
	if o == nil {
		return map[string]TagRelationshipOutput{}, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *VulnerabilityOutput) SetTags(v map[string]TagRelationshipOutput) {
	o.Tags = v
}

// GetRootType returns the RootType field value
func (o *VulnerabilityOutput) GetRootType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootType
}

// GetRootTypeOk returns a tuple with the RootType field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetRootTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootType, true
}

// SetRootType sets field value
func (o *VulnerabilityOutput) SetRootType(v string) {
	o.RootType = v
}

// GetRelatedObservablesCount returns the RelatedObservablesCount field value
func (o *VulnerabilityOutput) GetRelatedObservablesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RelatedObservablesCount
}

// GetRelatedObservablesCountOk returns a tuple with the RelatedObservablesCount field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityOutput) GetRelatedObservablesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedObservablesCount, true
}

// SetRelatedObservablesCount sets field value
func (o *VulnerabilityOutput) SetRelatedObservablesCount(v int32) {
	o.RelatedObservablesCount = v
}

func (o VulnerabilityOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerabilityOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.BaseScore) {
		toSerialize["base_score"] = o.BaseScore
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	toSerialize["id"] = o.Id
	toSerialize["tags"] = o.Tags
	toSerialize["root_type"] = o.RootType
	toSerialize["related_observables_count"] = o.RelatedObservablesCount
	return toSerialize, nil
}

func (o *VulnerabilityOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
		"tags",
		"root_type",
		"related_observables_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVulnerabilityOutput := _VulnerabilityOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVulnerabilityOutput)

	if err != nil {
		return err
	}

	*o = VulnerabilityOutput(varVulnerabilityOutput)

	return err
}

type NullableVulnerabilityOutput struct {
	value *VulnerabilityOutput
	isSet bool
}

func (v NullableVulnerabilityOutput) Get() *VulnerabilityOutput {
	return v.value
}

func (v *NullableVulnerabilityOutput) Set(val *VulnerabilityOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilityOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilityOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilityOutput(val *VulnerabilityOutput) *NullableVulnerabilityOutput {
	return &NullableVulnerabilityOutput{value: val, isSet: true}
}

func (v NullableVulnerabilityOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilityOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
