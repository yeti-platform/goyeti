/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goyeti

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WorkerStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkerStatusResponse{}

// WorkerStatusResponse Worker status API response.
type WorkerStatusResponse struct {
	Registered map[string][]string `json:"registered"`
	Active     [][]interface{}     `json:"active"`
}

type _WorkerStatusResponse WorkerStatusResponse

// NewWorkerStatusResponse instantiates a new WorkerStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerStatusResponse(registered map[string][]string, active [][]interface{}) *WorkerStatusResponse {
	this := WorkerStatusResponse{}
	this.Registered = registered
	this.Active = active
	return &this
}

// NewWorkerStatusResponseWithDefaults instantiates a new WorkerStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerStatusResponseWithDefaults() *WorkerStatusResponse {
	this := WorkerStatusResponse{}
	return &this
}

// GetRegistered returns the Registered field value
func (o *WorkerStatusResponse) GetRegistered() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Registered
}

// GetRegisteredOk returns a tuple with the Registered field value
// and a boolean to check if the value has been set.
func (o *WorkerStatusResponse) GetRegisteredOk() (map[string][]string, bool) {
	if o == nil {
		return map[string][]string{}, false
	}
	return o.Registered, true
}

// SetRegistered sets field value
func (o *WorkerStatusResponse) SetRegistered(v map[string][]string) {
	o.Registered = v
}

// GetActive returns the Active field value
func (o *WorkerStatusResponse) GetActive() [][]interface{} {
	if o == nil {
		var ret [][]interface{}
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *WorkerStatusResponse) GetActiveOk() ([][]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active, true
}

// SetActive sets field value
func (o *WorkerStatusResponse) SetActive(v [][]interface{}) {
	o.Active = v
}

func (o WorkerStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkerStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registered"] = o.Registered
	toSerialize["active"] = o.Active
	return toSerialize, nil
}

func (o *WorkerStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registered",
		"active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkerStatusResponse := _WorkerStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkerStatusResponse)

	if err != nil {
		return err
	}

	*o = WorkerStatusResponse(varWorkerStatusResponse)

	return err
}

type NullableWorkerStatusResponse struct {
	value *WorkerStatusResponse
	isSet bool
}

func (v NullableWorkerStatusResponse) Get() *WorkerStatusResponse {
	return v.value
}

func (v *NullableWorkerStatusResponse) Set(val *WorkerStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerStatusResponse(val *WorkerStatusResponse) *NullableWorkerStatusResponse {
	return &NullableWorkerStatusResponse{value: val, isSet: true}
}

func (v NullableWorkerStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
