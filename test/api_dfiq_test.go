/*
FastAPI

Testing DfiqAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package goyeti

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/yeti-platform/goyeti"
	"testing"
)

func Test_goyeti_DfiqAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfiqAPIService ConfigApiV2DfiqConfigGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfiqAPI.ConfigApiV2DfiqConfigGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfiqAPIService DeleteApiV2DfiqDfiqIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfiqId string

		resp, httpRes, err := apiClient.DfiqAPI.DeleteApiV2DfiqDfiqIdDelete(context.Background(), dfiqId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfiqAPIService DetailsApiV2DfiqDfiqIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfiqId interface{}

		resp, httpRes, err := apiClient.DfiqAPI.DetailsApiV2DfiqDfiqIdGet(context.Background(), dfiqId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfiqAPIService FromArchiveApiV2DfiqFromArchivePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfiqAPI.FromArchiveApiV2DfiqFromArchivePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfiqAPIService NewFromYamlApiV2DfiqFromYamlPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfiqAPI.NewFromYamlApiV2DfiqFromYamlPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfiqAPIService PatchApiV2DfiqDfiqIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfiqId interface{}

		resp, httpRes, err := apiClient.DfiqAPI.PatchApiV2DfiqDfiqIdPatch(context.Background(), dfiqId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfiqAPIService SearchApiV2DfiqSearchPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfiqAPI.SearchApiV2DfiqSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfiqAPIService ToArchiveApiV2DfiqToArchivePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfiqAPI.ToArchiveApiV2DfiqToArchivePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfiqAPIService ValidateDfiqYamlApiV2DfiqValidatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfiqAPI.ValidateDfiqYamlApiV2DfiqValidatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
