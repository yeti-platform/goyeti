/*
FastAPI

Testing GraphAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package goyeti

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/yeti-platform/goyeti"
	"testing"
)

func Test_goyeti_GraphAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GraphAPIService AddApiV2GraphAddPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GraphAPI.AddApiV2GraphAddPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphAPIService DeleteApiV2GraphRelationshipIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var relationshipId string

		resp, httpRes, err := apiClient.GraphAPI.DeleteApiV2GraphRelationshipIdDelete(context.Background(), relationshipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphAPIService EditApiV2GraphRelationshipIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var relationshipId string

		resp, httpRes, err := apiClient.GraphAPI.EditApiV2GraphRelationshipIdPatch(context.Background(), relationshipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphAPIService MatchApiV2GraphMatchPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GraphAPI.MatchApiV2GraphMatchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphAPIService SearchApiV2GraphSearchPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GraphAPI.SearchApiV2GraphSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphAPIService SwapApiV2GraphRelationshipIdSwapPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var relationshipId string

		resp, httpRes, err := apiClient.GraphAPI.SwapApiV2GraphRelationshipIdSwapPost(context.Background(), relationshipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
