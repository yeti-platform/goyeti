/*
FastAPI

Testing TasksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package goyeti

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/yeti-platform/goyeti"
	"testing"
)

func Test_goyeti_TasksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TasksAPIService DeleteExportApiV2TasksExportExportNameDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var exportName string

		resp, httpRes, err := apiClient.TasksAPI.DeleteExportApiV2TasksExportExportNameDelete(context.Background(), exportName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService ExportContentApiV2TasksExportExportIdContentGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var exportId string

		resp, httpRes, err := apiClient.TasksAPI.ExportContentApiV2TasksExportExportIdContentGet(context.Background(), exportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService NewExportApiV2TasksExportNewPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TasksAPI.NewExportApiV2TasksExportNewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService PatchExportApiV2TasksExportExportNamePatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var exportName string

		resp, httpRes, err := apiClient.TasksAPI.PatchExportApiV2TasksExportExportNamePatch(context.Background(), exportName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService RunApiV2TasksTaskNameRunPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taskName interface{}

		resp, httpRes, err := apiClient.TasksAPI.RunApiV2TasksTaskNameRunPost(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService SearchApiV2TasksSearchPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TasksAPI.SearchApiV2TasksSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService ToggleApiV2TasksTaskNameTogglePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taskName interface{}

		resp, httpRes, err := apiClient.TasksAPI.ToggleApiV2TasksTaskNameTogglePost(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
